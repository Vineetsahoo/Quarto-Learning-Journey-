{"title":"🎬 Movie Data Analytics Presentation","markdown":{"yaml":{"title":"🎬 Movie Data Analytics Presentation","subtitle":"Interactive Insights from TMDB Dataset","author":"Vineet Sahoo","date":"today","date-format":"MMMM DD, YYYY","format":{"revealjs":{"theme":"moon","transition":"slide","background-transition":"fade","slide-number":true,"controls":true,"progress":true,"center":true,"fig-width":12,"fig-height":8,"code-fold":true,"highlight-style":"github","incremental":true,"embed-resources":false,"navigation-mode":"linear","chalkboard":{"buttons":false},"preview-links":"auto","footer":"Movie Data Analytics | TMDB Dataset Analysis"}},"execute":{"echo":false,"warning":false,"message":false}},"headingText":"🎬 Movie Analytics Overview","containsRefs":false,"markdown":"\n\n\n## Presentation Agenda {.smaller}\n\n::: {.incremental}\n- 📊 **Dataset Overview** - Understanding our movie data\n- 📈 **Temporal Trends** - Release patterns over decades  \n- 🎭 **Genre Analysis** - Market preferences and performance\n- 💰 **Financial Insights** - Budget, revenue, and ROI analysis\n- ⭐ **Audience Engagement** - Ratings and voting patterns\n- 🎯 **Key Findings** - Strategic insights and recommendations\n- 🌟 **Featured Spotlight** - Highlighting exceptional movies\n:::\n\n::: {.notes}\nThis presentation analyzes comprehensive movie data from TMDB to reveal industry trends, audience preferences, and financial performance patterns.\n:::\n\n## Why Movie Data Analytics? {.center}\n\n:::: {.columns}\n\n::: {.column width=\"33%\" .fragment .fade-in fragment-index=1}\n### 🎯 **Industry Insights**\nUnderstanding market trends and audience preferences drives strategic decision-making\n:::\n\n::: {.column width=\"33%\" .fragment .fade-in fragment-index=2}\n### 💡 **Investment Guidance** \nData-driven analysis reveals optimal budget allocation and genre selection\n:::\n\n::: {.column width=\"33%\" .fragment .fade-in fragment-index=3}\n### 📊 **Performance Optimization**\nAnalytics uncover patterns between production factors and commercial success\n:::\n\n::::\n\n::: {.fragment .fade-in fragment-index=4 .center}\n**Let's dive into the data!** 🚀\n:::\n\n# 📊 Dataset Overview\n\n```{python}\n#| include: false\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Load and prepare data\ndf = pd.read_csv(\"TMDB-Small.csv\")\ndf['release_year'] = pd.to_datetime(df['release_date'], errors='coerce').dt.year\ndf['primary_genre'] = df['genres'].str.split(',').str[0].str.strip()\ndf['profit'] = df['revenue'] - df['budget']\ndf['roi'] = ((df['revenue'] - df['budget']) / df['budget'] * 100).replace([np.inf, -np.inf], np.nan)\ndf['decade'] = (df['release_year'] // 10) * 10\n\n# Calculate key statistics\ntotal_movies = len(df)\navg_rating = df['vote_average'].mean()\ntotal_revenue = df['revenue'].sum()\navg_budget = df['budget'].mean()\nyear_range = f\"{int(df['release_year'].min())} - {int(df['release_year'].max())}\"\n```\n\n## Key Dataset Metrics {.center}\n\n:::: {.columns}\n\n::: {.column width=\"50%\" .fragment .fade-in fragment-index=1}\n### 📈 **Scale & Scope**\n- **Total Movies:** `{python} f\"{total_movies:,}\"`\n- **Time Period:** `{python} year_range`\n- **Genres:** `{python} df['primary_genre'].nunique()` categories\n- **Data Completeness:** `{python} f\"{(1 - df.isnull().sum().sum() / (len(df) * len(df.columns))) * 100:.1f}%\"`\n:::\n\n::: {.column width=\"50%\" .fragment .fade-in fragment-index=2}\n### 💰 **Financial Overview**\n- **Total Revenue:** `{python} f\"${total_revenue/1e9:.1f}B\"`\n- **Average Budget:** `{python} f\"${avg_budget/1e6:.1f}M\"`\n- **Average Rating:** `{python} f\"{avg_rating:.1f}/10\"`\n- **Analysis Date:** `{python} datetime.now().strftime('%B %Y')`\n:::\n\n::::\n\n::: {.fragment .fade-in fragment-index=3 .center}\n*Comprehensive analysis of movie industry trends and patterns*\n:::\n\n# 📈 Temporal Analysis\n\n## Movie Production Trends\n\n```{python}\n#| fig-cap: \"Evolution of Movie Production Over Time\"\n\n# Create temporal analysis visualization\nfig = make_subplots(\n    rows=2, cols=1,\n    subplot_titles=('Annual Movie Releases', 'Production by Decade'),\n    vertical_spacing=0.15\n)\n\n# Filter valid years and prepare data\nvalid_years = df[(df['release_year'] >= 1900) & (df['release_year'] <= 2025)]\nyear_counts = valid_years['release_year'].value_counts().sort_index()\n\n# Annual releases line chart\nfig.add_trace(\n    go.Scatter(\n        x=year_counts.index,\n        y=year_counts.values,\n        mode='lines+markers',\n        name='Annual Releases',\n        line=dict(color='#FF6B6B', width=3),\n        marker=dict(size=4),\n        fill='tonexty',\n        fillcolor='rgba(255, 107, 107, 0.2)'\n    ),\n    row=1, col=1\n)\n\n# Decade analysis\ndecade_counts = valid_years['decade'].value_counts().sort_index()\ndecade_labels = [f\"{int(d)}s\" for d in decade_counts.index]\n\nfig.add_trace(\n    go.Bar(\n        x=decade_labels,\n        y=decade_counts.values,\n        name='Decade Totals',\n        marker_color='#4ECDC4',\n        text=decade_counts.values,\n        textposition='outside'\n    ),\n    row=2, col=1\n)\n\nfig.update_layout(\n    height=700,\n    showlegend=False,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=14, color='white'),\n    title_font_size=18\n)\n\nfig.update_xaxes(title_text=\"Release Year\", row=1, col=1, gridcolor='rgba(255,255,255,0.2)')\nfig.update_yaxes(title_text=\"Number of Movies\", row=1, col=1, gridcolor='rgba(255,255,255,0.2)')\nfig.update_xaxes(title_text=\"Decade\", row=2, col=1, gridcolor='rgba(255,255,255,0.2)')\nfig.update_yaxes(title_text=\"Total Movies\", row=2, col=1, gridcolor='rgba(255,255,255,0.2)')\n\nfig.show()\n```\n\n## Key Temporal Insights {.smaller}\n\n```{python}\n#| output: asis\n\n# Calculate insights\npeak_year = year_counts.idxmax()\npeak_count = year_counts.max()\npeak_decade = decade_counts.idxmax()\nrecent_avg = year_counts.tail(5).mean()\n\nprint(f\"\"\"\n::: {{.incremental}}\n- 🎯 **Peak Year:** {int(peak_year)} with **{peak_count} releases**\n- 🏆 **Most Productive Decade:** {peak_decade:.0f}s with **{decade_counts.max()} total films**\n- 📊 **Recent Trend:** Average of **{recent_avg:.1f} movies/year** in last 5 years\n- 📈 **Growth Pattern:** {'Accelerating' if recent_avg > year_counts.head(10).mean() else 'Stabilizing'} production rates\n:::\n\"\"\")\n```\n\n# 🎭 Genre Analysis\n\n## Genre Distribution & Performance\n\n```{python}\n#| fig-cap: \"Comprehensive Genre Analysis Dashboard\"\n\n# Create comprehensive genre analysis\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=('Top Genres by Count', 'Average Ratings by Genre', \n                   'Revenue Performance', 'Popularity vs Quality'),\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}],\n           [{\"type\": \"bar\"}, {\"type\": \"scatter\"}]]\n)\n\n# 1. Top genres by count\ntop_genres = df['primary_genre'].value_counts().head(8)\nfig.add_trace(\n    go.Bar(\n        y=top_genres.index,\n        x=top_genres.values,\n        orientation='h',\n        name='Movie Count',\n        marker_color='#FF9F43',\n        text=top_genres.values,\n        textposition='outside'\n    ),\n    row=1, col=1\n)\n\n# 2. Average ratings by genre\ngenre_ratings = df.groupby('primary_genre')['vote_average'].mean().sort_values(ascending=False).head(8)\nfig.add_trace(\n    go.Bar(\n        x=genre_ratings.index,\n        y=genre_ratings.values,\n        name='Average Rating',\n        marker_color='#26DE81',\n        text=[f'{x:.1f}' for x in genre_ratings.values],\n        textposition='outside'\n    ),\n    row=1, col=2\n)\n\n# 3. Revenue by genre\ngenre_revenue = df.groupby('primary_genre')['revenue'].sum().sort_values(ascending=False).head(8)\ngenre_revenue_billions = genre_revenue / 1e9\nfig.add_trace(\n    go.Bar(\n        x=genre_revenue_billions.index,\n        y=genre_revenue_billions.values,\n        name='Revenue (Billions)',\n        marker_color='#FD79A8',\n        text=[f'${x:.1f}B' for x in genre_revenue_billions.values],\n        textposition='outside'\n    ),\n    row=2, col=1\n)\n\n# 4. Popularity vs Quality scatter\ngenre_stats = df.groupby('primary_genre').agg({\n    'vote_count': 'mean',\n    'vote_average': 'mean',\n    'title': 'count'\n}).reset_index()\ngenre_stats = genre_stats[genre_stats['title'] >= 10]\n\nfig.add_trace(\n    go.Scatter(\n        x=genre_stats['vote_count'],\n        y=genre_stats['vote_average'],\n        mode='markers+text',\n        text=genre_stats['primary_genre'],\n        textposition='top center',\n        name='Genre Performance',\n        marker=dict(\n            size=genre_stats['title'],\n            sizemode='diameter',\n            sizeref=2.*max(genre_stats['title'])/(40.**2),\n            color=genre_stats['vote_average'],\n            colorscale='Viridis',\n            showscale=True,\n            colorbar=dict(title=\"Avg Rating\")\n        )\n    ),\n    row=2, col=2\n)\n\nfig.update_layout(\n    height=800,\n    showlegend=False,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=12, color='white')\n)\n\n# Update axes\nfig.update_xaxes(title_text=\"Number of Movies\", row=1, col=1)\nfig.update_xaxes(title_text=\"Genre\", row=1, col=2, tickangle=45)\nfig.update_yaxes(title_text=\"Rating\", row=1, col=2)\nfig.update_xaxes(title_text=\"Genre\", row=2, col=1, tickangle=45)\nfig.update_yaxes(title_text=\"Revenue ($B)\", row=2, col=1)\nfig.update_xaxes(title_text=\"Average Vote Count\", row=2, col=2)\nfig.update_yaxes(title_text=\"Average Rating\", row=2, col=2)\n\nfig.show()\n```\n\n## Genre Market Leaders {.center}\n\n```{python}\n#| output: asis\n\n# Calculate genre insights\nmost_popular = top_genres.index[0]\nhighest_rated = genre_ratings.index[0]\ntop_revenue = genre_revenue.index[0]\n\nprint(f\"\"\"\n:::: {{.columns}}\n\n::: {{.column width=\"33%\" .fragment .fade-in fragment-index=1}}\n### 🎬 **Most Produced**\n**{most_popular.title()}**  \n*{top_genres.iloc[0]} movies*\n:::\n\n::: {{.column width=\"33%\" .fragment .fade-in fragment-index=2}}\n### ⭐ **Highest Rated**\n**{highest_rated.title()}**  \n*{genre_ratings.iloc[0]:.1f}/10 average*\n:::\n\n::: {{.column width=\"33%\" .fragment .fade-in fragment-index=3}}\n### 💰 **Top Revenue**\n**{top_revenue.title()}**  \n*${genre_revenue.iloc[0]/1e9:.1f}B total*\n:::\n\n::::\n\"\"\")\n```\n\n# 💰 Financial Insights\n\n## Revenue vs Budget Analysis\n\n```{python}\n#| fig-cap: \"Financial Performance Metrics\"\n\n# Create financial analysis\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=('Budget vs Revenue', 'ROI Distribution', \n                   'Budget Trends Over Time', 'Top Grossing Movies'),\n    specs=[[{\"type\": \"scatter\"}, {\"type\": \"histogram\"}],\n           [{\"type\": \"scatter\"}, {\"type\": \"bar\"}]]\n)\n\n# 1. Budget vs Revenue scatter\nvalid_finance = df[(df['budget'] > 0) & (df['revenue'] > 0)]\nfig.add_trace(\n    go.Scatter(\n        x=valid_finance['budget']/1e6,\n        y=valid_finance['revenue']/1e6,\n        mode='markers',\n        name='Movies',\n        marker=dict(\n            size=8,\n            color=valid_finance['vote_average'],\n            colorscale='RdYlBu',\n            showscale=True,\n            colorbar=dict(title=\"Rating\", x=0.48)\n        ),\n        text=valid_finance['title'],\n        hovertemplate='<b>%{text}</b><br>Budget: $%{x:.1f}M<br>Revenue: $%{y:.1f}M<extra></extra>'\n    ),\n    row=1, col=1\n)\n\n# Add break-even line\nmax_val = max(valid_finance['budget'].max(), valid_finance['revenue'].max()) / 1e6\nfig.add_trace(\n    go.Scatter(\n        x=[0, max_val],\n        y=[0, max_val],\n        mode='lines',\n        name='Break-even',\n        line=dict(dash='dash', color='red')\n    ),\n    row=1, col=1\n)\n\n# 2. ROI Distribution\nvalid_roi = df[(df['roi'].notna()) & (df['roi'] > -100) & (df['roi'] < 1000)]\nfig.add_trace(\n    go.Histogram(\n        x=valid_roi['roi'],\n        nbinsx=30,\n        name='ROI Distribution',\n        marker_color='#FD79A8'\n    ),\n    row=1, col=2\n)\n\n# 3. Budget trends over time\nbudget_by_year = df[df['budget'] > 0].groupby('release_year')['budget'].mean()\nbudget_by_year = budget_by_year[(budget_by_year.index >= 1980) & (budget_by_year.index <= 2025)]\nfig.add_trace(\n    go.Scatter(\n        x=budget_by_year.index,\n        y=budget_by_year.values/1e6,\n        mode='lines+markers',\n        name='Average Budget',\n        line=dict(color='#74B9FF', width=3)\n    ),\n    row=2, col=1\n)\n\n# 4. Top grossing movies\ntop_movies = df.nlargest(8, 'revenue')[['title', 'revenue']]\nfig.add_trace(\n    go.Bar(\n        y=[title[:15] + '...' if len(title) > 15 else title for title in top_movies['title']],\n        x=top_movies['revenue']/1e9,\n        orientation='h',\n        name='Revenue',\n        marker_color='#00B894',\n        text=[f'${x:.1f}B' for x in top_movies['revenue']/1e9],\n        textposition='outside'\n    ),\n    row=2, col=2\n)\n\nfig.update_layout(\n    height=800,\n    showlegend=False,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=12, color='white')\n)\n\n# Update axes labels\nfig.update_xaxes(title_text=\"Budget ($M)\", row=1, col=1)\nfig.update_yaxes(title_text=\"Revenue ($M)\", row=1, col=1)\nfig.update_xaxes(title_text=\"ROI (%)\", row=1, col=2)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"Release Year\", row=2, col=1)\nfig.update_yaxes(title_text=\"Avg Budget ($M)\", row=2, col=1)\nfig.update_xaxes(title_text=\"Revenue ($B)\", row=2, col=2)\n\nfig.show()\n```\n\n## Financial Performance Summary {.smaller}\n\n```{python}\n#| output: asis\n\n# Calculate financial insights\navg_budget_millions = valid_finance['budget'].mean() / 1e6\navg_revenue_millions = valid_finance['revenue'].mean() / 1e6\navg_roi = valid_roi['roi'].mean()\nprofitable_pct = (valid_finance['revenue'] > valid_finance['budget']).mean() * 100\ntop_grosser = df.loc[df['revenue'].idxmax()]\n\nprint(f\"\"\"\n::: {{.incremental}}\n- 💵 **Average Investment:** ${avg_budget_millions:.1f}M budget generates ${avg_revenue_millions:.1f}M revenue\n- 📈 **Return on Investment:** {avg_roi:.1f}% average ROI across all profitable films  \n- 🎯 **Success Rate:** {profitable_pct:.1f}% of movies are financially profitable\n- 🏆 **Box Office Champion:** \"{top_grosser['title']}\" (${top_grosser['revenue']/1e9:.1f}B)\n- 💡 **Investment Insight:** Higher budgets show positive correlation with revenue\n:::\n\"\"\")\n```\n\n# ⭐ Audience Engagement\n\n## Rating Patterns & Preferences\n\n```{python}\n#| fig-cap: \"Audience Engagement and Rating Analysis\"\n\n# Create audience engagement analysis\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=('Rating Distribution', 'Votes vs Rating Correlation', \n                   'Top Rated Movies', 'Engagement by Runtime'),\n    specs=[[{\"type\": \"histogram\"}, {\"type\": \"scatter\"}],\n           [{\"type\": \"bar\"}, {\"type\": \"box\"}]]\n)\n\n# 1. Rating distribution\nfig.add_trace(\n    go.Histogram(\n        x=df['vote_average'],\n        nbinsx=25,\n        name='Rating Distribution',\n        marker_color='#6C5CE7'\n    ),\n    row=1, col=1\n)\n\n# 2. Vote count vs rating scatter\nhigh_engagement = df[df['vote_count'] > 100]\nfig.add_trace(\n    go.Scatter(\n        x=high_engagement['vote_count'],\n        y=high_engagement['vote_average'],\n        mode='markers',\n        name='High Engagement',\n        marker=dict(\n            size=6,\n            color='#FDCB6E',\n            opacity=0.7\n        ),\n        text=high_engagement['title'],\n        hovertemplate='<b>%{text}</b><br>Votes: %{x}<br>Rating: %{y}<extra></extra>'\n    ),\n    row=1, col=2\n)\n\n# 3. Top rated movies (min 500 votes)\npopular_movies = df[df['vote_count'] >= 500]\ntop_rated = popular_movies.nlargest(8, 'vote_average')\nfig.add_trace(\n    go.Bar(\n        y=[title[:20] + '...' if len(title) > 20 else title for title in top_rated['title']],\n        x=top_rated['vote_average'],\n        orientation='h',\n        name='Top Rated',\n        marker_color='#E17055',\n        text=[f'{x:.1f}' for x in top_rated['vote_average']],\n        textposition='outside'\n    ),\n    row=2, col=1\n)\n\n# 4. Rating by runtime categories\nruntime_bins = pd.cut(df['runtime'], bins=4, labels=['Short', 'Medium', 'Long', 'Epic'])\nruntime_data = []\nruntime_labels = []\nfor category in ['Short', 'Medium', 'Long', 'Epic']:\n    if category in runtime_bins.values:\n        ratings = df[runtime_bins == category]['vote_average'].dropna()\n        if len(ratings) > 0:\n            runtime_data.append(ratings)\n            runtime_labels.append(category)\n\nfor i, (label, data) in enumerate(zip(runtime_labels, runtime_data)):\n    fig.add_trace(\n        go.Box(\n            y=data,\n            name=label,\n            marker_color=['#00CEC9', '#FDCB6E', '#E17055', '#6C5CE7'][i]\n        ),\n        row=2, col=2\n    )\n\nfig.update_layout(\n    height=800,\n    showlegend=False,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=12, color='white')\n)\n\n# Update axes\nfig.update_xaxes(title_text=\"Rating\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=1)\nfig.update_xaxes(title_text=\"Vote Count\", row=1, col=2)\nfig.update_yaxes(title_text=\"Rating\", row=1, col=2)\nfig.update_xaxes(title_text=\"Rating\", row=2, col=1)\nfig.update_xaxes(title_text=\"Runtime Category\", row=2, col=2)\nfig.update_yaxes(title_text=\"Rating\", row=2, col=2)\n\nfig.show()\n```\n\n## Audience Behavior Insights {.center}\n\n```{python}\n#| output: asis\n\n# Calculate audience insights\navg_rating_all = df['vote_average'].mean()\nhigh_rated_count = (df['vote_average'] >= 8.0).sum()\nmost_voted = df.loc[df['vote_count'].idxmax()]\ncorrelation = high_engagement['vote_count'].corr(high_engagement['vote_average'])\n\nprint(f\"\"\"\n:::: {{.columns}}\n\n::: {{.column width=\"50%\" .fragment .fade-in fragment-index=1}}\n### 📊 **Rating Patterns**\n- **Average Rating:** {avg_rating_all:.1f}/10\n- **Highly Rated Films:** {high_rated_count} movies (8.0+)\n- **Rating Range:** {df['vote_average'].min():.1f} - {df['vote_average'].max():.1f}\n:::\n\n::: {{.column width=\"50%\" .fragment .fade-in fragment-index=2}}\n### 👥 **Engagement Metrics**\n- **Most Voted:** \"{most_voted['title'][:25]}...\"\n- **Vote Count:** {most_voted['vote_count']:,} reviews\n- **Popularity-Quality Correlation:** {correlation:.3f}\n:::\n\n::::\n\n::: {{.fragment .fade-in fragment-index=3 .center}}\n*Higher engagement generally correlates with better ratings*\n:::\n\"\"\")\n```\n\n# 🎯 Key Findings\n\n## Strategic Insights {.center}\n\n```{python}\n#| output: asis\n\n# Calculate comprehensive insights\nrecent_movies = df[df['release_year'] >= 2010]\nclassic_movies = df[df['release_year'] < 1990]\n\nrecent_avg_budget = recent_movies['budget'].mean() / 1e6\nrecent_avg_rating = recent_movies['vote_average'].mean()\nclassic_avg_rating = classic_movies['vote_average'].mean()\n\nprint(f\"\"\"\n:::: {{.columns}}\n\n::: {{.column width=\"50%\" .fragment .fade-in fragment-index=1}}\n### 📈 **Market Evolution**\n- Modern films (2010+): **${recent_avg_budget:.1f}M** average budget\n- Quality consistency: **{recent_avg_rating:.1f}/10** (recent) vs **{classic_avg_rating:.1f}/10** (classics)\n- Production growth reflects industry maturation\n:::\n\n::: {{.column width=\"50%\" .fragment .fade-in fragment-index=2}}\n### 💡 **Success Patterns**\n- Genre diversification increases market reach\n- Higher budgets correlate with revenue potential\n- Audience engagement drives long-term success\n:::\n\n::::\n\"\"\")\n```\n\n## Business Recommendations {.smaller}\n\n::: {.incremental}\n- 🎬 **Genre Strategy:** Focus on profitable genres while exploring innovative storytelling\n- 💰 **Budget Optimization:** Balance production costs with target audience reach\n- ⭐ **Quality Focus:** Prioritize storytelling quality for sustained audience engagement\n- 📊 **Data-Driven Decisions:** Use analytics to guide investment and marketing strategies\n- 🌍 **Market Expansion:** Consider international markets for revenue diversification\n:::\n\n# 🌟 Featured Spotlight\n\n## Exceptional Movie Showcase\n\n```{python}\n#| output: asis\n\n# Select a high-quality featured movie\nfeatured_candidates = df[(df['vote_average'] >= 8.0) & (df['vote_count'] >= 1000)]\nif len(featured_candidates) > 0:\n    featured = featured_candidates.sample(1).iloc[0]\nelse:\n    featured = df.sample(1).iloc[0]\n\n# Format movie details\ntitle = featured['title']\nyear = int(featured['release_year']) if pd.notna(featured['release_year']) else 'N/A'\nrating = featured['vote_average']\nvotes = int(featured['vote_count'])\nruntime = int(featured['runtime']) if pd.notna(featured['runtime']) else 'N/A'\ngenre = featured['primary_genre']\noverview = featured['overview'] if pd.notna(featured['overview']) else 'No description available.'\n\nprint(f\"\"\"\n### 🏆 {title} ({year})\n\n:::: {{.columns}}\n\n::: {{.column width=\"40%\" .fragment .fade-in fragment-index=1}}\n**Movie Details:**\n- **Genre:** {genre.title()}\n- **Rating:** ⭐ {rating}/10\n- **Votes:** 👥 {votes:,}\n- **Runtime:** ⏱️ {runtime} min\n:::\n\n::: {{.column width=\"60%\" .fragment .fade-in fragment-index=2}}\n**Synopsis:**\n{overview[:200]}{'...' if len(overview) > 200 else ''}\n:::\n\n::::\n\"\"\")\n\n# Add financial details if available\nif featured['revenue'] > 0 and featured['budget'] > 0:\n    profit = (featured['revenue'] - featured['budget']) / 1e6\n    roi = ((featured['revenue'] - featured['budget']) / featured['budget']) * 100\n    print(f\"\"\"\n::: {{.fragment .fade-in fragment-index=3 .center}}\n**Financial Performance:** Budget ${featured['budget']/1e6:.1f}M → Revenue ${featured['revenue']/1e6:.1f}M (ROI: {roi:.1f}%)\n:::\n\"\"\")\n```\n\n# 📋 Conclusion\n\n## Summary & Next Steps {.center}\n\n:::: {.columns}\n\n::: {.column width=\"50%\" .fragment .fade-in fragment-index=1}\n### 🎯 **What We Learned**\n- Movie industry shows consistent growth patterns\n- Genre preferences drive market dynamics  \n- Financial success correlates with audience engagement\n- Data analytics provides actionable insights\n:::\n\n::: {.column width=\"50%\" .fragment .fade-in fragment-index=2}\n### 🚀 **Future Opportunities**\n- Streaming platform integration analysis\n- International market expansion studies\n- Real-time audience sentiment tracking\n- AI-powered content recommendation systems\n:::\n\n::::\n\n::: {.fragment .fade-in fragment-index=3 .center}\n## Thank You! 🎬\n\n**Questions & Discussion**\n\n*Data-driven insights for the entertainment industry*\n:::\n\n::: {.notes}\nThis presentation demonstrated how data analytics can reveal valuable insights about the movie industry, from production trends to audience preferences and financial performance patterns.\n:::","srcMarkdownNoYaml":"\n\n# 🎬 Movie Analytics Overview\n\n## Presentation Agenda {.smaller}\n\n::: {.incremental}\n- 📊 **Dataset Overview** - Understanding our movie data\n- 📈 **Temporal Trends** - Release patterns over decades  \n- 🎭 **Genre Analysis** - Market preferences and performance\n- 💰 **Financial Insights** - Budget, revenue, and ROI analysis\n- ⭐ **Audience Engagement** - Ratings and voting patterns\n- 🎯 **Key Findings** - Strategic insights and recommendations\n- 🌟 **Featured Spotlight** - Highlighting exceptional movies\n:::\n\n::: {.notes}\nThis presentation analyzes comprehensive movie data from TMDB to reveal industry trends, audience preferences, and financial performance patterns.\n:::\n\n## Why Movie Data Analytics? {.center}\n\n:::: {.columns}\n\n::: {.column width=\"33%\" .fragment .fade-in fragment-index=1}\n### 🎯 **Industry Insights**\nUnderstanding market trends and audience preferences drives strategic decision-making\n:::\n\n::: {.column width=\"33%\" .fragment .fade-in fragment-index=2}\n### 💡 **Investment Guidance** \nData-driven analysis reveals optimal budget allocation and genre selection\n:::\n\n::: {.column width=\"33%\" .fragment .fade-in fragment-index=3}\n### 📊 **Performance Optimization**\nAnalytics uncover patterns between production factors and commercial success\n:::\n\n::::\n\n::: {.fragment .fade-in fragment-index=4 .center}\n**Let's dive into the data!** 🚀\n:::\n\n# 📊 Dataset Overview\n\n```{python}\n#| include: false\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Load and prepare data\ndf = pd.read_csv(\"TMDB-Small.csv\")\ndf['release_year'] = pd.to_datetime(df['release_date'], errors='coerce').dt.year\ndf['primary_genre'] = df['genres'].str.split(',').str[0].str.strip()\ndf['profit'] = df['revenue'] - df['budget']\ndf['roi'] = ((df['revenue'] - df['budget']) / df['budget'] * 100).replace([np.inf, -np.inf], np.nan)\ndf['decade'] = (df['release_year'] // 10) * 10\n\n# Calculate key statistics\ntotal_movies = len(df)\navg_rating = df['vote_average'].mean()\ntotal_revenue = df['revenue'].sum()\navg_budget = df['budget'].mean()\nyear_range = f\"{int(df['release_year'].min())} - {int(df['release_year'].max())}\"\n```\n\n## Key Dataset Metrics {.center}\n\n:::: {.columns}\n\n::: {.column width=\"50%\" .fragment .fade-in fragment-index=1}\n### 📈 **Scale & Scope**\n- **Total Movies:** `{python} f\"{total_movies:,}\"`\n- **Time Period:** `{python} year_range`\n- **Genres:** `{python} df['primary_genre'].nunique()` categories\n- **Data Completeness:** `{python} f\"{(1 - df.isnull().sum().sum() / (len(df) * len(df.columns))) * 100:.1f}%\"`\n:::\n\n::: {.column width=\"50%\" .fragment .fade-in fragment-index=2}\n### 💰 **Financial Overview**\n- **Total Revenue:** `{python} f\"${total_revenue/1e9:.1f}B\"`\n- **Average Budget:** `{python} f\"${avg_budget/1e6:.1f}M\"`\n- **Average Rating:** `{python} f\"{avg_rating:.1f}/10\"`\n- **Analysis Date:** `{python} datetime.now().strftime('%B %Y')`\n:::\n\n::::\n\n::: {.fragment .fade-in fragment-index=3 .center}\n*Comprehensive analysis of movie industry trends and patterns*\n:::\n\n# 📈 Temporal Analysis\n\n## Movie Production Trends\n\n```{python}\n#| fig-cap: \"Evolution of Movie Production Over Time\"\n\n# Create temporal analysis visualization\nfig = make_subplots(\n    rows=2, cols=1,\n    subplot_titles=('Annual Movie Releases', 'Production by Decade'),\n    vertical_spacing=0.15\n)\n\n# Filter valid years and prepare data\nvalid_years = df[(df['release_year'] >= 1900) & (df['release_year'] <= 2025)]\nyear_counts = valid_years['release_year'].value_counts().sort_index()\n\n# Annual releases line chart\nfig.add_trace(\n    go.Scatter(\n        x=year_counts.index,\n        y=year_counts.values,\n        mode='lines+markers',\n        name='Annual Releases',\n        line=dict(color='#FF6B6B', width=3),\n        marker=dict(size=4),\n        fill='tonexty',\n        fillcolor='rgba(255, 107, 107, 0.2)'\n    ),\n    row=1, col=1\n)\n\n# Decade analysis\ndecade_counts = valid_years['decade'].value_counts().sort_index()\ndecade_labels = [f\"{int(d)}s\" for d in decade_counts.index]\n\nfig.add_trace(\n    go.Bar(\n        x=decade_labels,\n        y=decade_counts.values,\n        name='Decade Totals',\n        marker_color='#4ECDC4',\n        text=decade_counts.values,\n        textposition='outside'\n    ),\n    row=2, col=1\n)\n\nfig.update_layout(\n    height=700,\n    showlegend=False,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=14, color='white'),\n    title_font_size=18\n)\n\nfig.update_xaxes(title_text=\"Release Year\", row=1, col=1, gridcolor='rgba(255,255,255,0.2)')\nfig.update_yaxes(title_text=\"Number of Movies\", row=1, col=1, gridcolor='rgba(255,255,255,0.2)')\nfig.update_xaxes(title_text=\"Decade\", row=2, col=1, gridcolor='rgba(255,255,255,0.2)')\nfig.update_yaxes(title_text=\"Total Movies\", row=2, col=1, gridcolor='rgba(255,255,255,0.2)')\n\nfig.show()\n```\n\n## Key Temporal Insights {.smaller}\n\n```{python}\n#| output: asis\n\n# Calculate insights\npeak_year = year_counts.idxmax()\npeak_count = year_counts.max()\npeak_decade = decade_counts.idxmax()\nrecent_avg = year_counts.tail(5).mean()\n\nprint(f\"\"\"\n::: {{.incremental}}\n- 🎯 **Peak Year:** {int(peak_year)} with **{peak_count} releases**\n- 🏆 **Most Productive Decade:** {peak_decade:.0f}s with **{decade_counts.max()} total films**\n- 📊 **Recent Trend:** Average of **{recent_avg:.1f} movies/year** in last 5 years\n- 📈 **Growth Pattern:** {'Accelerating' if recent_avg > year_counts.head(10).mean() else 'Stabilizing'} production rates\n:::\n\"\"\")\n```\n\n# 🎭 Genre Analysis\n\n## Genre Distribution & Performance\n\n```{python}\n#| fig-cap: \"Comprehensive Genre Analysis Dashboard\"\n\n# Create comprehensive genre analysis\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=('Top Genres by Count', 'Average Ratings by Genre', \n                   'Revenue Performance', 'Popularity vs Quality'),\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"bar\"}],\n           [{\"type\": \"bar\"}, {\"type\": \"scatter\"}]]\n)\n\n# 1. Top genres by count\ntop_genres = df['primary_genre'].value_counts().head(8)\nfig.add_trace(\n    go.Bar(\n        y=top_genres.index,\n        x=top_genres.values,\n        orientation='h',\n        name='Movie Count',\n        marker_color='#FF9F43',\n        text=top_genres.values,\n        textposition='outside'\n    ),\n    row=1, col=1\n)\n\n# 2. Average ratings by genre\ngenre_ratings = df.groupby('primary_genre')['vote_average'].mean().sort_values(ascending=False).head(8)\nfig.add_trace(\n    go.Bar(\n        x=genre_ratings.index,\n        y=genre_ratings.values,\n        name='Average Rating',\n        marker_color='#26DE81',\n        text=[f'{x:.1f}' for x in genre_ratings.values],\n        textposition='outside'\n    ),\n    row=1, col=2\n)\n\n# 3. Revenue by genre\ngenre_revenue = df.groupby('primary_genre')['revenue'].sum().sort_values(ascending=False).head(8)\ngenre_revenue_billions = genre_revenue / 1e9\nfig.add_trace(\n    go.Bar(\n        x=genre_revenue_billions.index,\n        y=genre_revenue_billions.values,\n        name='Revenue (Billions)',\n        marker_color='#FD79A8',\n        text=[f'${x:.1f}B' for x in genre_revenue_billions.values],\n        textposition='outside'\n    ),\n    row=2, col=1\n)\n\n# 4. Popularity vs Quality scatter\ngenre_stats = df.groupby('primary_genre').agg({\n    'vote_count': 'mean',\n    'vote_average': 'mean',\n    'title': 'count'\n}).reset_index()\ngenre_stats = genre_stats[genre_stats['title'] >= 10]\n\nfig.add_trace(\n    go.Scatter(\n        x=genre_stats['vote_count'],\n        y=genre_stats['vote_average'],\n        mode='markers+text',\n        text=genre_stats['primary_genre'],\n        textposition='top center',\n        name='Genre Performance',\n        marker=dict(\n            size=genre_stats['title'],\n            sizemode='diameter',\n            sizeref=2.*max(genre_stats['title'])/(40.**2),\n            color=genre_stats['vote_average'],\n            colorscale='Viridis',\n            showscale=True,\n            colorbar=dict(title=\"Avg Rating\")\n        )\n    ),\n    row=2, col=2\n)\n\nfig.update_layout(\n    height=800,\n    showlegend=False,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=12, color='white')\n)\n\n# Update axes\nfig.update_xaxes(title_text=\"Number of Movies\", row=1, col=1)\nfig.update_xaxes(title_text=\"Genre\", row=1, col=2, tickangle=45)\nfig.update_yaxes(title_text=\"Rating\", row=1, col=2)\nfig.update_xaxes(title_text=\"Genre\", row=2, col=1, tickangle=45)\nfig.update_yaxes(title_text=\"Revenue ($B)\", row=2, col=1)\nfig.update_xaxes(title_text=\"Average Vote Count\", row=2, col=2)\nfig.update_yaxes(title_text=\"Average Rating\", row=2, col=2)\n\nfig.show()\n```\n\n## Genre Market Leaders {.center}\n\n```{python}\n#| output: asis\n\n# Calculate genre insights\nmost_popular = top_genres.index[0]\nhighest_rated = genre_ratings.index[0]\ntop_revenue = genre_revenue.index[0]\n\nprint(f\"\"\"\n:::: {{.columns}}\n\n::: {{.column width=\"33%\" .fragment .fade-in fragment-index=1}}\n### 🎬 **Most Produced**\n**{most_popular.title()}**  \n*{top_genres.iloc[0]} movies*\n:::\n\n::: {{.column width=\"33%\" .fragment .fade-in fragment-index=2}}\n### ⭐ **Highest Rated**\n**{highest_rated.title()}**  \n*{genre_ratings.iloc[0]:.1f}/10 average*\n:::\n\n::: {{.column width=\"33%\" .fragment .fade-in fragment-index=3}}\n### 💰 **Top Revenue**\n**{top_revenue.title()}**  \n*${genre_revenue.iloc[0]/1e9:.1f}B total*\n:::\n\n::::\n\"\"\")\n```\n\n# 💰 Financial Insights\n\n## Revenue vs Budget Analysis\n\n```{python}\n#| fig-cap: \"Financial Performance Metrics\"\n\n# Create financial analysis\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=('Budget vs Revenue', 'ROI Distribution', \n                   'Budget Trends Over Time', 'Top Grossing Movies'),\n    specs=[[{\"type\": \"scatter\"}, {\"type\": \"histogram\"}],\n           [{\"type\": \"scatter\"}, {\"type\": \"bar\"}]]\n)\n\n# 1. Budget vs Revenue scatter\nvalid_finance = df[(df['budget'] > 0) & (df['revenue'] > 0)]\nfig.add_trace(\n    go.Scatter(\n        x=valid_finance['budget']/1e6,\n        y=valid_finance['revenue']/1e6,\n        mode='markers',\n        name='Movies',\n        marker=dict(\n            size=8,\n            color=valid_finance['vote_average'],\n            colorscale='RdYlBu',\n            showscale=True,\n            colorbar=dict(title=\"Rating\", x=0.48)\n        ),\n        text=valid_finance['title'],\n        hovertemplate='<b>%{text}</b><br>Budget: $%{x:.1f}M<br>Revenue: $%{y:.1f}M<extra></extra>'\n    ),\n    row=1, col=1\n)\n\n# Add break-even line\nmax_val = max(valid_finance['budget'].max(), valid_finance['revenue'].max()) / 1e6\nfig.add_trace(\n    go.Scatter(\n        x=[0, max_val],\n        y=[0, max_val],\n        mode='lines',\n        name='Break-even',\n        line=dict(dash='dash', color='red')\n    ),\n    row=1, col=1\n)\n\n# 2. ROI Distribution\nvalid_roi = df[(df['roi'].notna()) & (df['roi'] > -100) & (df['roi'] < 1000)]\nfig.add_trace(\n    go.Histogram(\n        x=valid_roi['roi'],\n        nbinsx=30,\n        name='ROI Distribution',\n        marker_color='#FD79A8'\n    ),\n    row=1, col=2\n)\n\n# 3. Budget trends over time\nbudget_by_year = df[df['budget'] > 0].groupby('release_year')['budget'].mean()\nbudget_by_year = budget_by_year[(budget_by_year.index >= 1980) & (budget_by_year.index <= 2025)]\nfig.add_trace(\n    go.Scatter(\n        x=budget_by_year.index,\n        y=budget_by_year.values/1e6,\n        mode='lines+markers',\n        name='Average Budget',\n        line=dict(color='#74B9FF', width=3)\n    ),\n    row=2, col=1\n)\n\n# 4. Top grossing movies\ntop_movies = df.nlargest(8, 'revenue')[['title', 'revenue']]\nfig.add_trace(\n    go.Bar(\n        y=[title[:15] + '...' if len(title) > 15 else title for title in top_movies['title']],\n        x=top_movies['revenue']/1e9,\n        orientation='h',\n        name='Revenue',\n        marker_color='#00B894',\n        text=[f'${x:.1f}B' for x in top_movies['revenue']/1e9],\n        textposition='outside'\n    ),\n    row=2, col=2\n)\n\nfig.update_layout(\n    height=800,\n    showlegend=False,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=12, color='white')\n)\n\n# Update axes labels\nfig.update_xaxes(title_text=\"Budget ($M)\", row=1, col=1)\nfig.update_yaxes(title_text=\"Revenue ($M)\", row=1, col=1)\nfig.update_xaxes(title_text=\"ROI (%)\", row=1, col=2)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=2)\nfig.update_xaxes(title_text=\"Release Year\", row=2, col=1)\nfig.update_yaxes(title_text=\"Avg Budget ($M)\", row=2, col=1)\nfig.update_xaxes(title_text=\"Revenue ($B)\", row=2, col=2)\n\nfig.show()\n```\n\n## Financial Performance Summary {.smaller}\n\n```{python}\n#| output: asis\n\n# Calculate financial insights\navg_budget_millions = valid_finance['budget'].mean() / 1e6\navg_revenue_millions = valid_finance['revenue'].mean() / 1e6\navg_roi = valid_roi['roi'].mean()\nprofitable_pct = (valid_finance['revenue'] > valid_finance['budget']).mean() * 100\ntop_grosser = df.loc[df['revenue'].idxmax()]\n\nprint(f\"\"\"\n::: {{.incremental}}\n- 💵 **Average Investment:** ${avg_budget_millions:.1f}M budget generates ${avg_revenue_millions:.1f}M revenue\n- 📈 **Return on Investment:** {avg_roi:.1f}% average ROI across all profitable films  \n- 🎯 **Success Rate:** {profitable_pct:.1f}% of movies are financially profitable\n- 🏆 **Box Office Champion:** \"{top_grosser['title']}\" (${top_grosser['revenue']/1e9:.1f}B)\n- 💡 **Investment Insight:** Higher budgets show positive correlation with revenue\n:::\n\"\"\")\n```\n\n# ⭐ Audience Engagement\n\n## Rating Patterns & Preferences\n\n```{python}\n#| fig-cap: \"Audience Engagement and Rating Analysis\"\n\n# Create audience engagement analysis\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=('Rating Distribution', 'Votes vs Rating Correlation', \n                   'Top Rated Movies', 'Engagement by Runtime'),\n    specs=[[{\"type\": \"histogram\"}, {\"type\": \"scatter\"}],\n           [{\"type\": \"bar\"}, {\"type\": \"box\"}]]\n)\n\n# 1. Rating distribution\nfig.add_trace(\n    go.Histogram(\n        x=df['vote_average'],\n        nbinsx=25,\n        name='Rating Distribution',\n        marker_color='#6C5CE7'\n    ),\n    row=1, col=1\n)\n\n# 2. Vote count vs rating scatter\nhigh_engagement = df[df['vote_count'] > 100]\nfig.add_trace(\n    go.Scatter(\n        x=high_engagement['vote_count'],\n        y=high_engagement['vote_average'],\n        mode='markers',\n        name='High Engagement',\n        marker=dict(\n            size=6,\n            color='#FDCB6E',\n            opacity=0.7\n        ),\n        text=high_engagement['title'],\n        hovertemplate='<b>%{text}</b><br>Votes: %{x}<br>Rating: %{y}<extra></extra>'\n    ),\n    row=1, col=2\n)\n\n# 3. Top rated movies (min 500 votes)\npopular_movies = df[df['vote_count'] >= 500]\ntop_rated = popular_movies.nlargest(8, 'vote_average')\nfig.add_trace(\n    go.Bar(\n        y=[title[:20] + '...' if len(title) > 20 else title for title in top_rated['title']],\n        x=top_rated['vote_average'],\n        orientation='h',\n        name='Top Rated',\n        marker_color='#E17055',\n        text=[f'{x:.1f}' for x in top_rated['vote_average']],\n        textposition='outside'\n    ),\n    row=2, col=1\n)\n\n# 4. Rating by runtime categories\nruntime_bins = pd.cut(df['runtime'], bins=4, labels=['Short', 'Medium', 'Long', 'Epic'])\nruntime_data = []\nruntime_labels = []\nfor category in ['Short', 'Medium', 'Long', 'Epic']:\n    if category in runtime_bins.values:\n        ratings = df[runtime_bins == category]['vote_average'].dropna()\n        if len(ratings) > 0:\n            runtime_data.append(ratings)\n            runtime_labels.append(category)\n\nfor i, (label, data) in enumerate(zip(runtime_labels, runtime_data)):\n    fig.add_trace(\n        go.Box(\n            y=data,\n            name=label,\n            marker_color=['#00CEC9', '#FDCB6E', '#E17055', '#6C5CE7'][i]\n        ),\n        row=2, col=2\n    )\n\nfig.update_layout(\n    height=800,\n    showlegend=False,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=12, color='white')\n)\n\n# Update axes\nfig.update_xaxes(title_text=\"Rating\", row=1, col=1)\nfig.update_yaxes(title_text=\"Frequency\", row=1, col=1)\nfig.update_xaxes(title_text=\"Vote Count\", row=1, col=2)\nfig.update_yaxes(title_text=\"Rating\", row=1, col=2)\nfig.update_xaxes(title_text=\"Rating\", row=2, col=1)\nfig.update_xaxes(title_text=\"Runtime Category\", row=2, col=2)\nfig.update_yaxes(title_text=\"Rating\", row=2, col=2)\n\nfig.show()\n```\n\n## Audience Behavior Insights {.center}\n\n```{python}\n#| output: asis\n\n# Calculate audience insights\navg_rating_all = df['vote_average'].mean()\nhigh_rated_count = (df['vote_average'] >= 8.0).sum()\nmost_voted = df.loc[df['vote_count'].idxmax()]\ncorrelation = high_engagement['vote_count'].corr(high_engagement['vote_average'])\n\nprint(f\"\"\"\n:::: {{.columns}}\n\n::: {{.column width=\"50%\" .fragment .fade-in fragment-index=1}}\n### 📊 **Rating Patterns**\n- **Average Rating:** {avg_rating_all:.1f}/10\n- **Highly Rated Films:** {high_rated_count} movies (8.0+)\n- **Rating Range:** {df['vote_average'].min():.1f} - {df['vote_average'].max():.1f}\n:::\n\n::: {{.column width=\"50%\" .fragment .fade-in fragment-index=2}}\n### 👥 **Engagement Metrics**\n- **Most Voted:** \"{most_voted['title'][:25]}...\"\n- **Vote Count:** {most_voted['vote_count']:,} reviews\n- **Popularity-Quality Correlation:** {correlation:.3f}\n:::\n\n::::\n\n::: {{.fragment .fade-in fragment-index=3 .center}}\n*Higher engagement generally correlates with better ratings*\n:::\n\"\"\")\n```\n\n# 🎯 Key Findings\n\n## Strategic Insights {.center}\n\n```{python}\n#| output: asis\n\n# Calculate comprehensive insights\nrecent_movies = df[df['release_year'] >= 2010]\nclassic_movies = df[df['release_year'] < 1990]\n\nrecent_avg_budget = recent_movies['budget'].mean() / 1e6\nrecent_avg_rating = recent_movies['vote_average'].mean()\nclassic_avg_rating = classic_movies['vote_average'].mean()\n\nprint(f\"\"\"\n:::: {{.columns}}\n\n::: {{.column width=\"50%\" .fragment .fade-in fragment-index=1}}\n### 📈 **Market Evolution**\n- Modern films (2010+): **${recent_avg_budget:.1f}M** average budget\n- Quality consistency: **{recent_avg_rating:.1f}/10** (recent) vs **{classic_avg_rating:.1f}/10** (classics)\n- Production growth reflects industry maturation\n:::\n\n::: {{.column width=\"50%\" .fragment .fade-in fragment-index=2}}\n### 💡 **Success Patterns**\n- Genre diversification increases market reach\n- Higher budgets correlate with revenue potential\n- Audience engagement drives long-term success\n:::\n\n::::\n\"\"\")\n```\n\n## Business Recommendations {.smaller}\n\n::: {.incremental}\n- 🎬 **Genre Strategy:** Focus on profitable genres while exploring innovative storytelling\n- 💰 **Budget Optimization:** Balance production costs with target audience reach\n- ⭐ **Quality Focus:** Prioritize storytelling quality for sustained audience engagement\n- 📊 **Data-Driven Decisions:** Use analytics to guide investment and marketing strategies\n- 🌍 **Market Expansion:** Consider international markets for revenue diversification\n:::\n\n# 🌟 Featured Spotlight\n\n## Exceptional Movie Showcase\n\n```{python}\n#| output: asis\n\n# Select a high-quality featured movie\nfeatured_candidates = df[(df['vote_average'] >= 8.0) & (df['vote_count'] >= 1000)]\nif len(featured_candidates) > 0:\n    featured = featured_candidates.sample(1).iloc[0]\nelse:\n    featured = df.sample(1).iloc[0]\n\n# Format movie details\ntitle = featured['title']\nyear = int(featured['release_year']) if pd.notna(featured['release_year']) else 'N/A'\nrating = featured['vote_average']\nvotes = int(featured['vote_count'])\nruntime = int(featured['runtime']) if pd.notna(featured['runtime']) else 'N/A'\ngenre = featured['primary_genre']\noverview = featured['overview'] if pd.notna(featured['overview']) else 'No description available.'\n\nprint(f\"\"\"\n### 🏆 {title} ({year})\n\n:::: {{.columns}}\n\n::: {{.column width=\"40%\" .fragment .fade-in fragment-index=1}}\n**Movie Details:**\n- **Genre:** {genre.title()}\n- **Rating:** ⭐ {rating}/10\n- **Votes:** 👥 {votes:,}\n- **Runtime:** ⏱️ {runtime} min\n:::\n\n::: {{.column width=\"60%\" .fragment .fade-in fragment-index=2}}\n**Synopsis:**\n{overview[:200]}{'...' if len(overview) > 200 else ''}\n:::\n\n::::\n\"\"\")\n\n# Add financial details if available\nif featured['revenue'] > 0 and featured['budget'] > 0:\n    profit = (featured['revenue'] - featured['budget']) / 1e6\n    roi = ((featured['revenue'] - featured['budget']) / featured['budget']) * 100\n    print(f\"\"\"\n::: {{.fragment .fade-in fragment-index=3 .center}}\n**Financial Performance:** Budget ${featured['budget']/1e6:.1f}M → Revenue ${featured['revenue']/1e6:.1f}M (ROI: {roi:.1f}%)\n:::\n\"\"\")\n```\n\n# 📋 Conclusion\n\n## Summary & Next Steps {.center}\n\n:::: {.columns}\n\n::: {.column width=\"50%\" .fragment .fade-in fragment-index=1}\n### 🎯 **What We Learned**\n- Movie industry shows consistent growth patterns\n- Genre preferences drive market dynamics  \n- Financial success correlates with audience engagement\n- Data analytics provides actionable insights\n:::\n\n::: {.column width=\"50%\" .fragment .fade-in fragment-index=2}\n### 🚀 **Future Opportunities**\n- Streaming platform integration analysis\n- International market expansion studies\n- Real-time audience sentiment tracking\n- AI-powered content recommendation systems\n:::\n\n::::\n\n::: {.fragment .fade-in fragment-index=3 .center}\n## Thank You! 🎬\n\n**Questions & Discussion**\n\n*Data-driven insights for the entertainment industry*\n:::\n\n::: {.notes}\nThis presentation demonstrated how data analytics can reveal valuable insights about the movie industry, from production trends to audience preferences and financial performance patterns.\n:::"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":12,"fig-height":8,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","highlight-style":"github","incremental":true,"embed-resources":false,"output-file":"presentation.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.7.32","auto-stretch":true,"title":"🎬 Movie Data Analytics Presentation","subtitle":"Interactive Insights from TMDB Dataset","author":"Vineet Sahoo","date":"today","date-format":"MMMM DD, YYYY","theme":"moon","transition":"slide","backgroundTransition":"fade","slideNumber":true,"controls":true,"progress":true,"center":true,"navigationMode":"linear","chalkboard":{"buttons":false},"previewLinks":"auto","footer":"Movie Data Analytics | TMDB Dataset Analysis"}}},"projectFormats":[]}