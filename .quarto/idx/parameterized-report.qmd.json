{"title":"🎬 Top Movies Analysis Report","markdown":{"yaml":{"title":"🎬 Top Movies Analysis Report","subtitle":"Discover the Best Films by Genre","author":"Vineet Sahoo","date":"today","date-format":"MMMM DD, YYYY","format":{"html":{"theme":"cosmo","toc":true,"toc-depth":3,"toc-location":"left","code-fold":true,"code-summary":"Show Code","code-tools":true,"smooth-scroll":true,"css":"param-style.css","fig-width":12,"fig-height":8,"fig-responsive":true,"embed-resources":false,"page-layout":"full","grid":{"sidebar-width":"250px","body-width":"900px","margin-width":"150px"},"execute":{"echo":false,"warning":false,"message":false,"freeze":"auto"}}},"echo":false,"warning":false,"message":false,"execute":{"freeze":"auto"}},"headingText":"Load and process data","containsRefs":false,"markdown":"\n\n```{python}\n#| tags: [parameters]\n#| include: false\n\nnum_movies = 5\ngenre = \"comedy\"\nmin_votes = 100  # Minimum vote count for quality filtering\nyear_filter = None  # Optional year filter (e.g., 2020 for movies from 2020+)\nsort_by = \"vote_average\"  # Options: \"vote_average\", \"vote_count\", \"revenue\", \"release_date\"\n```\n\n```{python}\n#| include: false\n\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\nfrom datetime import datetime\n\ndf = pd.read_csv('TMDB-Small.csv')\ndf['primary_genre'] = df['genres'].str.split(',').str[0].str.strip().str.lower()\ndf['release_year'] = pd.to_datetime(df['release_date']).dt.year\n\n# Filter by genre and minimum votes for quality\ndf_genre = df[(df['primary_genre'] == genre) & (df['vote_count'] >= min_votes)]\n\n# Apply optional year filter\nif year_filter:\n    df_genre = df_genre[df_genre['release_year'] >= year_filter]\n\n# Sort movies based on specified criteria\nsort_column = sort_by if sort_by in df_genre.columns else 'vote_average'\nascending_sort = False if sort_by in ['vote_average', 'vote_count', 'revenue'] else True\ntop_movies = df_genre.sort_values(sort_column, ascending=ascending_sort).head(num_movies)\n\n# Calculate statistics\navg_rating = top_movies['vote_average'].mean()\ntotal_revenue = top_movies['revenue'].sum()\navg_runtime = top_movies['runtime'].mean()\nmin_year = int(top_movies['release_year'].min()) if not pd.isna(top_movies['release_year'].min()) else 'N/A'\nmax_year = int(top_movies['release_year'].max()) if not pd.isna(top_movies['release_year'].max()) else 'N/A'\nyear_range = f\"{min_year} - {max_year}\"\n\n# Color scheme\ncolors = ['#6366F1', '#EC4899', '#10B981', '#F59E0B', '#EF4444']\n```\n\n```{python}\n#| echo: false\nhero_date = datetime.now().strftime('%B %d, %Y')\nhero_min_votes = f\"{min_votes:,}\"\nhero_sort_by = sort_by.replace('_', ' ').title()\nhero_year_filter = f\"{year_filter}+\" if year_filter else \"All Years\"\n```\n\n::: {.hero-banner}\n# 🎭 Top `{python} num_movies` Movies in `{python} genre.title()` \n\n*Curated selection of the highest-rated films based on audience reviews*\n\n**Analysis Date:** `{python} hero_date` | **Minimum Votes:** `{python} hero_min_votes` | **Sort By:** `{python} hero_sort_by` | **Year Filter:** `{python} hero_year_filter`\n:::\n\n```{python}\n#| echo: false\n# Format statistics for display\navg_rating_display = f\"{avg_rating:.1f}/10\"\ntotal_revenue_display = f\"${total_revenue/1e9:.1f}B\" if total_revenue > 0 else \"N/A\"\navg_runtime_display = f\"{avg_runtime:.0f} min\" if not pd.isna(avg_runtime) else \"N/A\"\n```\n\n## 📊 Quick Statistics\n\n::: {.stats-grid}\n\n::: {.stat-card}\n**Average Rating**  \n`{python} avg_rating_display`\n:::\n\n::: {.stat-card}\n**Total Revenue**  \n`{python} total_revenue_display`\n:::\n\n::: {.stat-card}\n**Average Runtime**  \n`{python} avg_runtime_display`\n:::\n\n::: {.stat-card}\n**Year Range**  \n`{python} year_range`\n:::\n\n:::\n\n## 📈 Performance Visualization\n\n```{python}\n#| fig-cap: \"Rating and popularity comparison of top movies\"\n#| fig-width: 14\n#| fig-height: 10\n\n# Create an enhanced visualization optimized for HTML\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=('Ratings Comparison', 'Vote Count Distribution', \n                   'Revenue Performance', 'Release Timeline'),\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"scatter\"}],\n           [{\"type\": \"bar\"}, {\"type\": \"scatter\"}]],\n    vertical_spacing=0.15,\n    horizontal_spacing=0.1\n)\n\n# 1. Ratings comparison\nfig.add_trace(\n    go.Bar(\n        x=top_movies['title'].str[:20] + '...',\n        y=top_movies['vote_average'],\n        marker_color=colors[:len(top_movies)],\n        name=\"Rating\",\n        text=top_movies['vote_average'].round(1),\n        textposition='outside'\n    ),\n    row=1, col=1\n)\n\n# 2. Vote count vs rating\nfig.add_trace(\n    go.Scatter(\n        x=top_movies['vote_count'],\n        y=top_movies['vote_average'],\n        mode='markers+text',\n        marker=dict(size=15, color=colors[:len(top_movies)]),\n        text=list(range(1, len(top_movies) + 1)),\n        textposition='middle center',\n        textfont=dict(color='white', size=12),\n        name=\"Votes vs Rating\"\n    ),\n    row=1, col=2\n)\n\n# 3. Revenue comparison (if available)\nif top_movies['revenue'].sum() > 0:\n    fig.add_trace(\n        go.Bar(\n            x=top_movies['title'].str[:20] + '...',\n            y=top_movies['revenue'] / 1e6,\n            marker_color=colors[:len(top_movies)],\n            name=\"Revenue (M$)\",\n            text=(top_movies['revenue'] / 1e6).round(1),\n            textposition='outside'\n        ),\n        row=2, col=1\n    )\n\n# 4. Release year timeline\nfig.add_trace(\n    go.Scatter(\n        x=top_movies['release_year'],\n        y=top_movies['vote_average'],\n        mode='markers+lines+text',\n        marker=dict(size=12, color=colors[:len(top_movies)]),\n        text=list(range(1, len(top_movies) + 1)),\n        textposition='top center',\n        name=\"Timeline\"\n    ),\n    row=2, col=2\n)\n\nfig.update_layout(\n    height=800,\n    showlegend=False,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=12),\n    title_font_size=16,\n    margin=dict(t=60, b=40, l=40, r=40)\n)\n\nfig.update_xaxes(title_text=\"Movies\", row=1, col=1)\nfig.update_yaxes(title_text=\"Rating\", row=1, col=1)\nfig.update_xaxes(title_text=\"Vote Count\", row=1, col=2)\nfig.update_yaxes(title_text=\"Rating\", row=1, col=2)\nfig.update_xaxes(title_text=\"Movies\", row=2, col=1)\nfig.update_yaxes(title_text=\"Revenue (M$)\", row=2, col=1)\nfig.update_xaxes(title_text=\"Release Year\", row=2, col=2)\nfig.update_yaxes(title_text=\"Rating\", row=2, col=2)\n\nfig.show()\n```\n\n## 🏆 Top `{python} num_movies` `{python} genre.title()` Movies\n\n```{python}\n#| results: asis\n\n# Generate movie cards dynamically\nfor i in range(len(top_movies)):\n    movie = top_movies.iloc[i]\n    rank = i + 1\n    \n    # Prepare safe variables for f-string formatting\n    movie_year = int(movie['release_year']) if not pd.isna(movie['release_year']) else 'N/A'\n    movie_runtime = f\"{int(movie['runtime'])} min\" if not pd.isna(movie['runtime']) else 'N/A min'\n    movie_revenue = f\"${movie['revenue']/1e6:.1f}M\" if movie['revenue'] > 0 else 'Not available'\n    movie_revenue_note = '(Available)' if movie['revenue'] > 0 else '(Not available)'\n    movie_overview = movie['overview'] if pd.notna(movie['overview']) else 'No overview available.'\n    movie_votes = f\"{movie['vote_count']:,}\"\n    \n    print(f\"\"\"\n::: {{.movie-card}}\n\n### #{rank} {movie['title']} ({movie_year})\n\n::: {{.movie-details}}\n\n::: {{.movie-stats}}\n- **Rating:** ⭐ {movie['vote_average']:.1f}/10\n- **Votes:** 👥 {movie_votes}\n- **Runtime:** ⏱️ {movie_runtime}\n- **Revenue:** 💰 {movie_revenue} {movie_revenue_note}\n:::\n\n::: {{.movie-description}}\n**Plot Summary:**  \n{movie_overview}\n:::\n\n:::\n\n:::\n\n\"\"\")\n```\n\n## 📊 Detailed Analysis\n\n### Genre Performance Overview\n\n```{python}\n#| fig-cap: \"Comprehensive genre analysis showing distribution patterns\"\n\n# Create genre comparison\nfig = go.Figure()\n\n# Rating distribution\nfig.add_trace(go.Histogram(\n    x=top_movies['vote_average'],\n    name='Rating Distribution',\n    marker_color='#6366F1',\n    opacity=0.7,\n    nbinsx=10\n))\n\nfig.update_layout(\n    title=f\"Rating Distribution for Top {num_movies} {genre.title()} Movies\",\n    xaxis_title=\"Rating\",\n    yaxis_title=\"Count\",\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    height=400\n)\n\nfig.show()\n```\n\n### Movie Comparison Table\n\n```{python}\n#| label: tbl-comparison\n#| tbl-cap: \"Detailed comparison of top movies\"\n\n# Create comparison table\ncomparison_df = top_movies[['title', 'release_year', 'vote_average', 'vote_count', 'runtime', 'revenue']].copy()\ncomparison_df.columns = ['Title', 'Year', 'Rating', 'Votes', 'Runtime (min)', 'Revenue ($)']\ncomparison_df['Revenue ($)'] = comparison_df['Revenue ($)'].apply(lambda x: f\"${x:,.0f}\" if x > 0 else \"N/A\")\ncomparison_df['Votes'] = comparison_df['Votes'].apply(lambda x: f\"{x:,}\")\ncomparison_df['Runtime (min)'] = comparison_df['Runtime (min)'].apply(lambda x: f\"{int(x)}\" if not pd.isna(x) else \"N/A\")\ncomparison_df['Year'] = comparison_df['Year'].apply(lambda x: f\"{int(x)}\" if not pd.isna(x) else \"N/A\")\ncomparison_df.index = range(1, len(comparison_df) + 1)\n\ncomparison_df\n```\n\n```{python}\n#| echo: false\n\n# Prepare insight variables\nhighest_rated_title = top_movies.iloc[0]['title']\nhighest_rated_score = top_movies.iloc[0]['vote_average']\nmost_popular_title = top_movies.loc[top_movies['vote_count'].idxmax()]['title']\nmost_popular_votes = f\"{top_movies['vote_count'].max():,}\"\ntop_earner_title = top_movies.loc[top_movies['revenue'].idxmax()]['title'] if top_movies['revenue'].max() > 0 else 'Revenue data unavailable'\ntop_earner_revenue = f\"${top_movies['revenue'].max()/1e6:.1f}M\" if top_movies['revenue'].max() > 0 else 'N/A'\nera_min = int(top_movies['release_year'].min()) if not pd.isna(top_movies['release_year'].min()) else 'N/A'\nera_max = int(top_movies['release_year'].max()) if not pd.isna(top_movies['release_year'].max()) else 'N/A'\n```\n\n## 🔍 Key Insights\n\n::: {.insights-section}\n\n::: {.insight-card}\n**🎯 Highest Rated**  \n*`{python} highest_rated_title`* leads with `{python} highest_rated_score` stars\n:::\n\n::: {.insight-card}\n**📈 Most Popular**  \n*`{python} most_popular_title`* has the most votes with `{python} most_popular_votes` reviews\n:::\n\n::: {.insight-card}\n**💰 Top Earner**  \n*`{python} top_earner_title`* generated `{python} top_earner_revenue`\n:::\n\n::: {.insight-card}\n**📅 Era Span**  \nMovies span from `{python} era_min` to `{python} era_max`\n:::\n\n:::\n\n## 🎭 Genre Performance Comparison\n\n```{python}\n#| fig-cap: \"Comparison of selected genre against other popular genres\"\n#| fig-width: 12\n#| fig-height: 6\n\n# Get all genres for comparison\nall_genres_df = df[df['vote_count'] >= min_votes].copy()\ngenre_stats = all_genres_df.groupby('primary_genre').agg({\n    'vote_average': 'mean',\n    'vote_count': 'sum',\n    'revenue': 'mean',\n    'title': 'count'\n}).round(2)\ngenre_stats.columns = ['Avg_Rating', 'Total_Votes', 'Avg_Revenue', 'Movie_Count']\ngenre_stats = genre_stats[genre_stats['Movie_Count'] >= 3].sort_values('Avg_Rating', ascending=False).head(8)\n\n# Highlight current genre\ncolors_genre = ['#6366F1' if idx == genre else '#94A3B8' for idx in genre_stats.index]\n\nfig = go.Figure()\n\n# Add bar chart\nfig.add_trace(go.Bar(\n    x=genre_stats.index,\n    y=genre_stats['Avg_Rating'],\n    marker_color=colors_genre,\n    text=genre_stats['Avg_Rating'],\n    textposition='outside',\n    name='Average Rating',\n    hovertemplate='<b>%{x}</b><br>Rating: %{y}<br>Movies: %{customdata}<extra></extra>',\n    customdata=genre_stats['Movie_Count']\n))\n\nfig.update_layout(\n    title=f\"Genre Performance Comparison (Highlighting {genre.title()})\",\n    xaxis_title=\"Genre\",\n    yaxis_title=\"Average Rating\",\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    height=500,\n    font=dict(size=12),\n    showlegend=False,\n    margin=dict(t=60, b=80, l=60, r=40)\n)\n\nfig.update_xaxes(tickangle=45)\nfig.show()\n```\n\n```{python}\n#| echo: false\n\n# Prepare summary variables\nsummary_avg_rating = f\"{avg_rating:.1f}\"\nsummary_min_votes = f\"{min_votes:,}\"\nsummary_total_revenue = f\"${total_revenue/1e9:.1f}B\" if total_revenue > 0 else \"revenue data limited\"\nsummary_avg_runtime = f\"{avg_runtime:.0f}\" if not pd.isna(avg_runtime) else \"N/A\"\nsummary_sort_by = sort_by.replace('_', ' ').title()\nsummary_time_period = f\"Movies from {year_filter} onwards\" if year_filter else \"All available years included\"\nsummary_methodology_note = f\"Analysis limited to movies released from {year_filter} onwards.\" if year_filter else \"No year restrictions applied.\"\nsummary_report_date = datetime.now().strftime('%B %d, %Y at %I:%M %p')\nsummary_parameters = f\"Genre={genre.title()}, Count={num_movies}, Sort={sort_by.replace('_', ' ').title()}, Min Votes={min_votes:,}\"\n```\n\n## 📋 Summary\n\nThis analysis of the top `{python} num_movies` `{python} genre` movies reveals:\n\n- **Quality Consistency:** Average rating of `{python} summary_avg_rating` demonstrates high quality across selections\n- **Audience Engagement:** All movies meet the minimum threshold of `{python} summary_min_votes` votes\n- **Commercial Success:** Combined revenue of `{python} summary_total_revenue`\n- **Runtime:** Average duration of `{python} summary_avg_runtime` minutes\n- **Sorting Criteria:** Results sorted by `{python} summary_sort_by` for optimal selection\n- **Time Period:** `{python} summary_time_period`\n\n::: {.callout-note}\n**Methodology Note:** Movies are ranked by `{python} summary_sort_by` with a minimum vote threshold of `{python} summary_min_votes` to ensure statistical significance and quality assessment. `{python} summary_methodology_note` \n:::\n\n---\n\n*Report generated on `{python} summary_report_date` | Parameters: `{python} summary_parameters`*\n\n::: {.callout-tip}\n## 💡 **Interactive Features**\n\nThis HTML report includes several interactive elements:\n- **📊 Hover over charts** for detailed information\n- **🔍 Expand code sections** to see the analysis behind each visualization  \n- **📱 Responsive design** adapts to your screen size\n- **🔗 Smooth navigation** with the table of contents sidebar\n\n**💡 Customization Guide**\n\nThis report can be customized with different parameters:\n- **num_movies**: Number of top movies to analyze (e.g., 10, 20)\n- **genre**: Movie genre to focus on (e.g., \"action\", \"drama\", \"sci-fi\")\n- **min_votes**: Minimum vote threshold for quality (e.g., 50, 500)\n- **year_filter**: Minimum release year (e.g., 2010, 2020)\n- **sort_by**: Sorting criteria (\"vote_average\", \"vote_count\", \"revenue\", \"release_date\")\n\n**Example usage:**\n```bash\nquarto render parameterized-report.qmd -P genre:action -P num_movies:10 -P min_votes:200\n```\n:::\n","srcMarkdownNoYaml":"\n\n```{python}\n#| tags: [parameters]\n#| include: false\n\nnum_movies = 5\ngenre = \"comedy\"\nmin_votes = 100  # Minimum vote count for quality filtering\nyear_filter = None  # Optional year filter (e.g., 2020 for movies from 2020+)\nsort_by = \"vote_average\"  # Options: \"vote_average\", \"vote_count\", \"revenue\", \"release_date\"\n```\n\n```{python}\n#| include: false\n\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\nfrom datetime import datetime\n\n# Load and process data\ndf = pd.read_csv('TMDB-Small.csv')\ndf['primary_genre'] = df['genres'].str.split(',').str[0].str.strip().str.lower()\ndf['release_year'] = pd.to_datetime(df['release_date']).dt.year\n\n# Filter by genre and minimum votes for quality\ndf_genre = df[(df['primary_genre'] == genre) & (df['vote_count'] >= min_votes)]\n\n# Apply optional year filter\nif year_filter:\n    df_genre = df_genre[df_genre['release_year'] >= year_filter]\n\n# Sort movies based on specified criteria\nsort_column = sort_by if sort_by in df_genre.columns else 'vote_average'\nascending_sort = False if sort_by in ['vote_average', 'vote_count', 'revenue'] else True\ntop_movies = df_genre.sort_values(sort_column, ascending=ascending_sort).head(num_movies)\n\n# Calculate statistics\navg_rating = top_movies['vote_average'].mean()\ntotal_revenue = top_movies['revenue'].sum()\navg_runtime = top_movies['runtime'].mean()\nmin_year = int(top_movies['release_year'].min()) if not pd.isna(top_movies['release_year'].min()) else 'N/A'\nmax_year = int(top_movies['release_year'].max()) if not pd.isna(top_movies['release_year'].max()) else 'N/A'\nyear_range = f\"{min_year} - {max_year}\"\n\n# Color scheme\ncolors = ['#6366F1', '#EC4899', '#10B981', '#F59E0B', '#EF4444']\n```\n\n```{python}\n#| echo: false\nhero_date = datetime.now().strftime('%B %d, %Y')\nhero_min_votes = f\"{min_votes:,}\"\nhero_sort_by = sort_by.replace('_', ' ').title()\nhero_year_filter = f\"{year_filter}+\" if year_filter else \"All Years\"\n```\n\n::: {.hero-banner}\n# 🎭 Top `{python} num_movies` Movies in `{python} genre.title()` \n\n*Curated selection of the highest-rated films based on audience reviews*\n\n**Analysis Date:** `{python} hero_date` | **Minimum Votes:** `{python} hero_min_votes` | **Sort By:** `{python} hero_sort_by` | **Year Filter:** `{python} hero_year_filter`\n:::\n\n```{python}\n#| echo: false\n# Format statistics for display\navg_rating_display = f\"{avg_rating:.1f}/10\"\ntotal_revenue_display = f\"${total_revenue/1e9:.1f}B\" if total_revenue > 0 else \"N/A\"\navg_runtime_display = f\"{avg_runtime:.0f} min\" if not pd.isna(avg_runtime) else \"N/A\"\n```\n\n## 📊 Quick Statistics\n\n::: {.stats-grid}\n\n::: {.stat-card}\n**Average Rating**  \n`{python} avg_rating_display`\n:::\n\n::: {.stat-card}\n**Total Revenue**  \n`{python} total_revenue_display`\n:::\n\n::: {.stat-card}\n**Average Runtime**  \n`{python} avg_runtime_display`\n:::\n\n::: {.stat-card}\n**Year Range**  \n`{python} year_range`\n:::\n\n:::\n\n## 📈 Performance Visualization\n\n```{python}\n#| fig-cap: \"Rating and popularity comparison of top movies\"\n#| fig-width: 14\n#| fig-height: 10\n\n# Create an enhanced visualization optimized for HTML\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=('Ratings Comparison', 'Vote Count Distribution', \n                   'Revenue Performance', 'Release Timeline'),\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"scatter\"}],\n           [{\"type\": \"bar\"}, {\"type\": \"scatter\"}]],\n    vertical_spacing=0.15,\n    horizontal_spacing=0.1\n)\n\n# 1. Ratings comparison\nfig.add_trace(\n    go.Bar(\n        x=top_movies['title'].str[:20] + '...',\n        y=top_movies['vote_average'],\n        marker_color=colors[:len(top_movies)],\n        name=\"Rating\",\n        text=top_movies['vote_average'].round(1),\n        textposition='outside'\n    ),\n    row=1, col=1\n)\n\n# 2. Vote count vs rating\nfig.add_trace(\n    go.Scatter(\n        x=top_movies['vote_count'],\n        y=top_movies['vote_average'],\n        mode='markers+text',\n        marker=dict(size=15, color=colors[:len(top_movies)]),\n        text=list(range(1, len(top_movies) + 1)),\n        textposition='middle center',\n        textfont=dict(color='white', size=12),\n        name=\"Votes vs Rating\"\n    ),\n    row=1, col=2\n)\n\n# 3. Revenue comparison (if available)\nif top_movies['revenue'].sum() > 0:\n    fig.add_trace(\n        go.Bar(\n            x=top_movies['title'].str[:20] + '...',\n            y=top_movies['revenue'] / 1e6,\n            marker_color=colors[:len(top_movies)],\n            name=\"Revenue (M$)\",\n            text=(top_movies['revenue'] / 1e6).round(1),\n            textposition='outside'\n        ),\n        row=2, col=1\n    )\n\n# 4. Release year timeline\nfig.add_trace(\n    go.Scatter(\n        x=top_movies['release_year'],\n        y=top_movies['vote_average'],\n        mode='markers+lines+text',\n        marker=dict(size=12, color=colors[:len(top_movies)]),\n        text=list(range(1, len(top_movies) + 1)),\n        textposition='top center',\n        name=\"Timeline\"\n    ),\n    row=2, col=2\n)\n\nfig.update_layout(\n    height=800,\n    showlegend=False,\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=12),\n    title_font_size=16,\n    margin=dict(t=60, b=40, l=40, r=40)\n)\n\nfig.update_xaxes(title_text=\"Movies\", row=1, col=1)\nfig.update_yaxes(title_text=\"Rating\", row=1, col=1)\nfig.update_xaxes(title_text=\"Vote Count\", row=1, col=2)\nfig.update_yaxes(title_text=\"Rating\", row=1, col=2)\nfig.update_xaxes(title_text=\"Movies\", row=2, col=1)\nfig.update_yaxes(title_text=\"Revenue (M$)\", row=2, col=1)\nfig.update_xaxes(title_text=\"Release Year\", row=2, col=2)\nfig.update_yaxes(title_text=\"Rating\", row=2, col=2)\n\nfig.show()\n```\n\n## 🏆 Top `{python} num_movies` `{python} genre.title()` Movies\n\n```{python}\n#| results: asis\n\n# Generate movie cards dynamically\nfor i in range(len(top_movies)):\n    movie = top_movies.iloc[i]\n    rank = i + 1\n    \n    # Prepare safe variables for f-string formatting\n    movie_year = int(movie['release_year']) if not pd.isna(movie['release_year']) else 'N/A'\n    movie_runtime = f\"{int(movie['runtime'])} min\" if not pd.isna(movie['runtime']) else 'N/A min'\n    movie_revenue = f\"${movie['revenue']/1e6:.1f}M\" if movie['revenue'] > 0 else 'Not available'\n    movie_revenue_note = '(Available)' if movie['revenue'] > 0 else '(Not available)'\n    movie_overview = movie['overview'] if pd.notna(movie['overview']) else 'No overview available.'\n    movie_votes = f\"{movie['vote_count']:,}\"\n    \n    print(f\"\"\"\n::: {{.movie-card}}\n\n### #{rank} {movie['title']} ({movie_year})\n\n::: {{.movie-details}}\n\n::: {{.movie-stats}}\n- **Rating:** ⭐ {movie['vote_average']:.1f}/10\n- **Votes:** 👥 {movie_votes}\n- **Runtime:** ⏱️ {movie_runtime}\n- **Revenue:** 💰 {movie_revenue} {movie_revenue_note}\n:::\n\n::: {{.movie-description}}\n**Plot Summary:**  \n{movie_overview}\n:::\n\n:::\n\n:::\n\n\"\"\")\n```\n\n## 📊 Detailed Analysis\n\n### Genre Performance Overview\n\n```{python}\n#| fig-cap: \"Comprehensive genre analysis showing distribution patterns\"\n\n# Create genre comparison\nfig = go.Figure()\n\n# Rating distribution\nfig.add_trace(go.Histogram(\n    x=top_movies['vote_average'],\n    name='Rating Distribution',\n    marker_color='#6366F1',\n    opacity=0.7,\n    nbinsx=10\n))\n\nfig.update_layout(\n    title=f\"Rating Distribution for Top {num_movies} {genre.title()} Movies\",\n    xaxis_title=\"Rating\",\n    yaxis_title=\"Count\",\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    height=400\n)\n\nfig.show()\n```\n\n### Movie Comparison Table\n\n```{python}\n#| label: tbl-comparison\n#| tbl-cap: \"Detailed comparison of top movies\"\n\n# Create comparison table\ncomparison_df = top_movies[['title', 'release_year', 'vote_average', 'vote_count', 'runtime', 'revenue']].copy()\ncomparison_df.columns = ['Title', 'Year', 'Rating', 'Votes', 'Runtime (min)', 'Revenue ($)']\ncomparison_df['Revenue ($)'] = comparison_df['Revenue ($)'].apply(lambda x: f\"${x:,.0f}\" if x > 0 else \"N/A\")\ncomparison_df['Votes'] = comparison_df['Votes'].apply(lambda x: f\"{x:,}\")\ncomparison_df['Runtime (min)'] = comparison_df['Runtime (min)'].apply(lambda x: f\"{int(x)}\" if not pd.isna(x) else \"N/A\")\ncomparison_df['Year'] = comparison_df['Year'].apply(lambda x: f\"{int(x)}\" if not pd.isna(x) else \"N/A\")\ncomparison_df.index = range(1, len(comparison_df) + 1)\n\ncomparison_df\n```\n\n```{python}\n#| echo: false\n\n# Prepare insight variables\nhighest_rated_title = top_movies.iloc[0]['title']\nhighest_rated_score = top_movies.iloc[0]['vote_average']\nmost_popular_title = top_movies.loc[top_movies['vote_count'].idxmax()]['title']\nmost_popular_votes = f\"{top_movies['vote_count'].max():,}\"\ntop_earner_title = top_movies.loc[top_movies['revenue'].idxmax()]['title'] if top_movies['revenue'].max() > 0 else 'Revenue data unavailable'\ntop_earner_revenue = f\"${top_movies['revenue'].max()/1e6:.1f}M\" if top_movies['revenue'].max() > 0 else 'N/A'\nera_min = int(top_movies['release_year'].min()) if not pd.isna(top_movies['release_year'].min()) else 'N/A'\nera_max = int(top_movies['release_year'].max()) if not pd.isna(top_movies['release_year'].max()) else 'N/A'\n```\n\n## 🔍 Key Insights\n\n::: {.insights-section}\n\n::: {.insight-card}\n**🎯 Highest Rated**  \n*`{python} highest_rated_title`* leads with `{python} highest_rated_score` stars\n:::\n\n::: {.insight-card}\n**📈 Most Popular**  \n*`{python} most_popular_title`* has the most votes with `{python} most_popular_votes` reviews\n:::\n\n::: {.insight-card}\n**💰 Top Earner**  \n*`{python} top_earner_title`* generated `{python} top_earner_revenue`\n:::\n\n::: {.insight-card}\n**📅 Era Span**  \nMovies span from `{python} era_min` to `{python} era_max`\n:::\n\n:::\n\n## 🎭 Genre Performance Comparison\n\n```{python}\n#| fig-cap: \"Comparison of selected genre against other popular genres\"\n#| fig-width: 12\n#| fig-height: 6\n\n# Get all genres for comparison\nall_genres_df = df[df['vote_count'] >= min_votes].copy()\ngenre_stats = all_genres_df.groupby('primary_genre').agg({\n    'vote_average': 'mean',\n    'vote_count': 'sum',\n    'revenue': 'mean',\n    'title': 'count'\n}).round(2)\ngenre_stats.columns = ['Avg_Rating', 'Total_Votes', 'Avg_Revenue', 'Movie_Count']\ngenre_stats = genre_stats[genre_stats['Movie_Count'] >= 3].sort_values('Avg_Rating', ascending=False).head(8)\n\n# Highlight current genre\ncolors_genre = ['#6366F1' if idx == genre else '#94A3B8' for idx in genre_stats.index]\n\nfig = go.Figure()\n\n# Add bar chart\nfig.add_trace(go.Bar(\n    x=genre_stats.index,\n    y=genre_stats['Avg_Rating'],\n    marker_color=colors_genre,\n    text=genre_stats['Avg_Rating'],\n    textposition='outside',\n    name='Average Rating',\n    hovertemplate='<b>%{x}</b><br>Rating: %{y}<br>Movies: %{customdata}<extra></extra>',\n    customdata=genre_stats['Movie_Count']\n))\n\nfig.update_layout(\n    title=f\"Genre Performance Comparison (Highlighting {genre.title()})\",\n    xaxis_title=\"Genre\",\n    yaxis_title=\"Average Rating\",\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    height=500,\n    font=dict(size=12),\n    showlegend=False,\n    margin=dict(t=60, b=80, l=60, r=40)\n)\n\nfig.update_xaxes(tickangle=45)\nfig.show()\n```\n\n```{python}\n#| echo: false\n\n# Prepare summary variables\nsummary_avg_rating = f\"{avg_rating:.1f}\"\nsummary_min_votes = f\"{min_votes:,}\"\nsummary_total_revenue = f\"${total_revenue/1e9:.1f}B\" if total_revenue > 0 else \"revenue data limited\"\nsummary_avg_runtime = f\"{avg_runtime:.0f}\" if not pd.isna(avg_runtime) else \"N/A\"\nsummary_sort_by = sort_by.replace('_', ' ').title()\nsummary_time_period = f\"Movies from {year_filter} onwards\" if year_filter else \"All available years included\"\nsummary_methodology_note = f\"Analysis limited to movies released from {year_filter} onwards.\" if year_filter else \"No year restrictions applied.\"\nsummary_report_date = datetime.now().strftime('%B %d, %Y at %I:%M %p')\nsummary_parameters = f\"Genre={genre.title()}, Count={num_movies}, Sort={sort_by.replace('_', ' ').title()}, Min Votes={min_votes:,}\"\n```\n\n## 📋 Summary\n\nThis analysis of the top `{python} num_movies` `{python} genre` movies reveals:\n\n- **Quality Consistency:** Average rating of `{python} summary_avg_rating` demonstrates high quality across selections\n- **Audience Engagement:** All movies meet the minimum threshold of `{python} summary_min_votes` votes\n- **Commercial Success:** Combined revenue of `{python} summary_total_revenue`\n- **Runtime:** Average duration of `{python} summary_avg_runtime` minutes\n- **Sorting Criteria:** Results sorted by `{python} summary_sort_by` for optimal selection\n- **Time Period:** `{python} summary_time_period`\n\n::: {.callout-note}\n**Methodology Note:** Movies are ranked by `{python} summary_sort_by` with a minimum vote threshold of `{python} summary_min_votes` to ensure statistical significance and quality assessment. `{python} summary_methodology_note` \n:::\n\n---\n\n*Report generated on `{python} summary_report_date` | Parameters: `{python} summary_parameters`*\n\n::: {.callout-tip}\n## 💡 **Interactive Features**\n\nThis HTML report includes several interactive elements:\n- **📊 Hover over charts** for detailed information\n- **🔍 Expand code sections** to see the analysis behind each visualization  \n- **📱 Responsive design** adapts to your screen size\n- **🔗 Smooth navigation** with the table of contents sidebar\n\n**💡 Customization Guide**\n\nThis report can be customized with different parameters:\n- **num_movies**: Number of top movies to analyze (e.g., 10, 20)\n- **genre**: Movie genre to focus on (e.g., \"action\", \"drama\", \"sci-fi\")\n- **min_votes**: Minimum vote threshold for quality (e.g., 50, 500)\n- **year_filter**: Minimum release year (e.g., 2010, 2020)\n- **sort_by**: Sorting criteria (\"vote_average\", \"vote_count\", \"revenue\", \"release_date\")\n\n**Example usage:**\n```bash\nquarto render parameterized-report.qmd -P genre:action -P num_movies:10 -P min_votes:200\n```\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":12,"fig-height":8,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"css":["param-style.css"],"embed-resources":false,"output-file":"parameterized-report.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","title":"🎬 Top Movies Analysis Report","subtitle":"Discover the Best Films by Genre","author":"Vineet Sahoo","date":"today","date-format":"MMMM DD, YYYY","message":false,"theme":"cosmo","toc-location":"left","code-summary":"Show Code","smooth-scroll":true,"page-layout":"full","grid":{"sidebar-width":"250px","body-width":"900px","margin-width":"150px"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}