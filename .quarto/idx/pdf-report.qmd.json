{"title":"🎬 Comprehensive Movie Data Analysis","markdown":{"yaml":{"title":"🎬 Comprehensive Movie Data Analysis","subtitle":"TMDB Dataset Insights & Trends","author":"Vineet Sahoo","date":"today","date-format":"MMMM DD, YYYY","format":{"pdf":{"documentclass":"article","geometry":["margin=0.8in","paperwidth=8.5in","paperheight=11in"],"fontsize":"11pt","colorlinks":true,"linkcolor":"blue","urlcolor":"blue","citecolor":"blue","include-in-header":{"text":"\\usepackage{fancyhdr}\n\\usepackage{graphicx}\n\\usepackage{booktabs}\n\\usepackage{longtable}\n\\usepackage{array}\n\\usepackage{multirow}\n\\usepackage{wrapfig}\n\\usepackage{float}\n\\usepackage{colortbl}\n\\usepackage{pdflscape}\n\\usepackage{tabu}\n\\usepackage{threeparttable}\n\\pagestyle{fancy}\n\\fancyhf{}\n\\fancyhead[L]{\\textbf{Movie Data Analysis}}\n\\fancyhead[R]{\\thepage}\n\\fancyfoot[C]{TMDB Dataset Analysis Report}\n"},"toc":true,"toc-depth":3,"number-sections":true,"fig-cap-location":"bottom","execute":{"echo":false,"warning":false,"message":false}}},"echo":false,"warning":false,"message":false},"headingText":"Executive Summary","containsRefs":false,"markdown":"\n\n\nThis comprehensive analysis examines movie data from The Movie Database (TMDB), providing insights into industry trends, genre preferences, and audience engagement patterns. The dataset encompasses thousands of films with detailed metadata including ratings, revenue, release dates, and audience metrics.\n\n**Key Findings:**\n- Analysis covers movies spanning multiple decades\n- Revenue and rating correlations reveal audience preferences  \n- Genre distribution shows evolving entertainment trends\n- Release patterns indicate industry production cycles\n\n```{python}\n#| include: false\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Set up matplotlib for better PDF output\nplt.style.use('seaborn-v0_8')\nplt.rcParams['figure.figsize'] = (10, 6)\nplt.rcParams['font.size'] = 10\nplt.rcParams['axes.titlesize'] = 12\nplt.rcParams['axes.labelsize'] = 10\nplt.rcParams['xtick.labelsize'] = 9\nplt.rcParams['ytick.labelsize'] = 9\nplt.rcParams['legend.fontsize'] = 9\n\n# Load and prepare data\ndf = pd.read_csv(\"TMDB-Small.csv\")\ndf['release_year'] = pd.to_datetime(df['release_date'], errors='coerce').dt.year\ndf['primary_genre'] = df['genres'].str.split(',').str[0].str.strip()\ndf['profit'] = df['revenue'] - df['budget']\ndf['roi'] = ((df['revenue'] - df['budget']) / df['budget'] * 100).replace([np.inf, -np.inf], np.nan)\ndf['decade'] = (df['release_year'] // 10) * 10  # Add decade column to main dataframe\n\n# Calculate key statistics\ntotal_movies = len(df)\navg_rating = df['vote_average'].mean()\ntotal_revenue = df['revenue'].sum()\navg_budget = df['budget'].mean()\nyear_range = f\"{int(df['release_year'].min())} - {int(df['release_year'].max())}\"\n```\n\n## Dataset Overview\n\n```{python}\n#| label: tbl-overview\n#| tbl-cap: \"Dataset Summary Statistics\"\n\n# Create overview statistics\noverview_stats = pd.DataFrame({\n    'Metric': ['Total Movies', 'Average Rating', 'Total Revenue (Billions)', \n               'Average Budget (Millions)', 'Year Range', 'Genres Available'],\n    'Value': [\n        f\"{total_movies:,}\",\n        f\"{avg_rating:.1f}/10\",\n        f\"${total_revenue/1e9:.1f}B\",\n        f\"${avg_budget/1e6:.1f}M\",\n        year_range,\n        f\"{df['primary_genre'].nunique()}\"\n    ]\n})\n\nprint(overview_stats.to_latex(index=False, escape=False))\n```\n{{< pagebreak >}}\n\n## Release Year Distribution Analysis\n\nThe temporal distribution of movie releases reveals significant insights about industry production patterns and historical trends in cinema.\n\n```{python}\n#| fig-cap: \"Movie Release Distribution by Year\"\n#| fig-align: \"center\"\n\n# Enhanced release year distribution\nplt.figure(figsize=(12, 7))\n\n# Filter out invalid years\nvalid_years = df[(df['release_year'] >= 1900) & (df['release_year'] <= 2025)]\nyear_counts = valid_years['release_year'].value_counts().sort_index()\n\n# Create the plot\nplt.subplot(2, 1, 1)\nplt.plot(year_counts.index, year_counts.values, linewidth=2, color='#2E86AB', alpha=0.8)\nplt.fill_between(year_counts.index, year_counts.values, alpha=0.3, color='#2E86AB')\nplt.title('Movie Releases by Year', fontsize=14, fontweight='bold', pad=20)\nplt.xlabel('Release Year')\nplt.ylabel('Number of Movies')\nplt.grid(True, alpha=0.3)\n\n# Add decade analysis\nplt.subplot(2, 1, 2)\ndecade_counts = valid_years['decade'].value_counts().sort_index()\ndecade_labels = [f\"{int(d)}s\" for d in decade_counts.index]\n\nbars = plt.bar(decade_labels, decade_counts.values, color='#A23B72', alpha=0.7, edgecolor='black', linewidth=0.5)\nplt.title('Movie Releases by Decade', fontsize=14, fontweight='bold', pad=20)\nplt.xlabel('Decade')\nplt.ylabel('Number of Movies')\nplt.xticks(rotation=45)\n\n# Add value labels on bars\nfor bar in bars:\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2., height + 0.01*max(decade_counts),\n             f'{int(height)}', ha='center', va='bottom', fontsize=9)\n\nplt.tight_layout()\nplt.show()\n```\n\n### Key Observations:\n\n```{python}\n#| output: asis\n\n# Calculate insights\npeak_year = year_counts.idxmax()\npeak_count = year_counts.max()\nrecent_trend = year_counts.tail(5).mean()\nearly_trend = year_counts.head(10).mean()\n\nprint(f\"\"\"\n- **Peak Production Year:** {int(peak_year)} with {peak_count} releases\n- **Recent 5-Year Average:** {recent_trend:.1f} movies per year\n- **Decade with Most Films:** {decade_counts.idxmax():.0f}s with {decade_counts.max()} total releases\n- **Production Growth:** {'Increasing' if recent_trend > early_trend else 'Decreasing'} trend in recent years\n\"\"\")\n```\n\n{{< pagebreak >}}\n\n## Genre Analysis & Market Trends\n\nUnderstanding genre distribution and performance provides crucial insights into audience preferences and market dynamics.\n\n```{python}\n#| fig-cap: \"Genre Distribution and Performance Analysis\"\n#| fig-align: \"center\"\n\n# Enhanced genre analysis\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(14, 10))\n\n# 1. Genre Distribution (Top 10)\ntop_genres = df['primary_genre'].value_counts().head(10)\nax1.barh(range(len(top_genres)), top_genres.values, color='#F18F01', alpha=0.8)\nax1.set_yticks(range(len(top_genres)))\nax1.set_yticklabels(top_genres.index)\nax1.set_xlabel('Number of Movies')\nax1.set_title('Top 10 Genres by Count', fontweight='bold')\nax1.grid(axis='x', alpha=0.3)\n\n# Add value labels\nfor i, v in enumerate(top_genres.values):\n    ax1.text(v + 0.01*max(top_genres.values), i, str(v), va='center', fontsize=9)\n\n# 2. Average Rating by Genre\ngenre_ratings = df.groupby('primary_genre')['vote_average'].mean().sort_values(ascending=False).head(10)\nbars2 = ax2.bar(range(len(genre_ratings)), genre_ratings.values, color='#C73E1D', alpha=0.8)\nax2.set_xticks(range(len(genre_ratings)))\nax2.set_xticklabels(genre_ratings.index, rotation=45, ha='right')\nax2.set_ylabel('Average Rating')\nax2.set_title('Average Rating by Genre (Top 10)', fontweight='bold')\nax2.grid(axis='y', alpha=0.3)\n\n# Add value labels\nfor bar in bars2:\n    height = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2., height + 0.01,\n             f'{height:.1f}', ha='center', va='bottom', fontsize=9)\n\n# 3. Revenue by Genre (Top 10)\ngenre_revenue = df.groupby('primary_genre')['revenue'].sum().sort_values(ascending=False).head(10)\ngenre_revenue_billions = genre_revenue / 1e9\nbars3 = ax3.bar(range(len(genre_revenue_billions)), genre_revenue_billions.values, color='#3E92CC', alpha=0.8)\nax3.set_xticks(range(len(genre_revenue_billions)))\nax3.set_xticklabels(genre_revenue_billions.index, rotation=45, ha='right')\nax3.set_ylabel('Total Revenue (Billions $)')\nax3.set_title('Total Revenue by Genre (Top 10)', fontweight='bold')\nax3.grid(axis='y', alpha=0.3)\n\n# Add value labels\nfor bar in bars3:\n    height = bar.get_height()\n    ax3.text(bar.get_x() + bar.get_width()/2., height + 0.01,\n             f'${height:.1f}B', ha='center', va='bottom', fontsize=9)\n\n# 4. Vote Count vs Rating by Genre (Scatter)\ngenre_stats = df.groupby('primary_genre').agg({\n    'vote_count': 'mean',\n    'vote_average': 'mean',\n    'title': 'count'\n}).reset_index()\ngenre_stats = genre_stats[genre_stats['title'] >= 10]  # Filter genres with at least 10 movies\n\nscatter = ax4.scatter(genre_stats['vote_count'], genre_stats['vote_average'], \n                     s=genre_stats['title']*2, alpha=0.6, c=range(len(genre_stats)), cmap='viridis')\nax4.set_xlabel('Average Vote Count')\nax4.set_ylabel('Average Rating')\nax4.set_title('Genre Performance: Popularity vs Quality', fontweight='bold')\nax4.grid(True, alpha=0.3)\n\n# Add labels for top genres\nfor i, row in genre_stats.iterrows():\n    if row['title'] > 50:  # Label only major genres\n        ax4.annotate(row['primary_genre'], (row['vote_count'], row['vote_average']), \n                    xytext=(5, 5), textcoords='offset points', fontsize=8, alpha=0.8)\n\nplt.tight_layout()\nplt.show()\n```\n\n### Genre Performance Insights:\n\n```{python}\n#| output: asis\n\n# Calculate genre insights\nmost_popular_genre = top_genres.index[0]\nhighest_rated_genre = genre_ratings.index[0]\nhighest_revenue_genre = genre_revenue.index[0]\n\n# Calculate most prolific genre per decade safely\ntry:\n    decade_genre_counts = df.groupby(['decade', 'primary_genre']).size()\n    most_prolific_by_decade = decade_genre_counts.groupby('primary_genre').sum().idxmax()\nexcept:\n    most_prolific_by_decade = most_popular_genre\n\nprint(f\"\"\"\n- **Most Produced Genre:** {most_popular_genre} ({top_genres.iloc[0]} movies)\n- **Highest Rated Genre:** {highest_rated_genre} (Average: {genre_ratings.iloc[0]:.1f}/10)\n- **Highest Revenue Genre:** {highest_revenue_genre} (${genre_revenue.iloc[0]/1e9:.1f}B total)\n- **Market Leader:** {most_popular_genre} dominates both quantity and commercial success\n\"\"\")\n```\n\n{{< pagebreak >}}\n\n## Revenue & Budget Analysis\n\nFinancial performance metrics reveal important patterns in movie production investments and returns.\n\n```{python}\n#| fig-cap: \"Financial Performance Analysis\"\n#| fig-align: \"center\"\n\n# Enhanced financial analysis\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(14, 10))\n\n# 1. Budget vs Revenue Scatter\nvalid_finance = df[(df['budget'] > 0) & (df['revenue'] > 0)]\nax1.scatter(valid_finance['budget']/1e6, valid_finance['revenue']/1e6, alpha=0.6, s=30, color='#2E86AB')\nax1.set_xlabel('Budget (Millions $)')\nax1.set_ylabel('Revenue (Millions $)')\nax1.set_title('Budget vs Revenue Relationship', fontweight='bold')\nax1.grid(True, alpha=0.3)\n\n# Add break-even line\nmax_val = max(valid_finance['budget'].max(), valid_finance['revenue'].max()) / 1e6\nax1.plot([0, max_val], [0, max_val], 'r--', alpha=0.7, label='Break-even line')\nax1.legend()\n\n# 2. ROI Distribution\nvalid_roi = df[(df['roi'].notna()) & (df['roi'] > -100) & (df['roi'] < 1000)]\nax2.hist(valid_roi['roi'], bins=50, color='#F18F01', alpha=0.7, edgecolor='black', linewidth=0.5)\nax2.set_xlabel('Return on Investment (%)')\nax2.set_ylabel('Frequency')\nax2.set_title('ROI Distribution', fontweight='bold')\nax2.grid(axis='y', alpha=0.3)\nax2.axvline(valid_roi['roi'].mean(), color='red', linestyle='--', alpha=0.8, label=f'Mean: {valid_roi[\"roi\"].mean():.1f}%')\nax2.legend()\n\n# 3. Budget trends over time\nbudget_by_year = df[df['budget'] > 0].groupby('release_year')['budget'].mean()\nbudget_by_year = budget_by_year[(budget_by_year.index >= 1980) & (budget_by_year.index <= 2025)]\nax3.plot(budget_by_year.index, budget_by_year.values/1e6, linewidth=2, color='#A23B72', marker='o', markersize=4)\nax3.set_xlabel('Release Year')\nax3.set_ylabel('Average Budget (Millions $)')\nax3.set_title('Average Movie Budget Trends', fontweight='bold')\nax3.grid(True, alpha=0.3)\n\n# 4. Top Revenue Movies\ntop_revenue = df.nlargest(10, 'revenue')[['title', 'revenue', 'release_year']]\ntop_revenue['revenue_billions'] = top_revenue['revenue'] / 1e9\nbars4 = ax4.barh(range(len(top_revenue)), top_revenue['revenue_billions'], color='#C73E1D', alpha=0.8)\nax4.set_yticks(range(len(top_revenue)))\nax4.set_yticklabels([f\"{title[:20]}...\" if len(title) > 20 else title for title in top_revenue['title']])\nax4.set_xlabel('Revenue (Billions $)')\nax4.set_title('Top 10 Highest Grossing Movies', fontweight='bold')\nax4.grid(axis='x', alpha=0.3)\n\n# Add value labels\nfor i, v in enumerate(top_revenue['revenue_billions']):\n    ax4.text(v + 0.01*max(top_revenue['revenue_billions']), i, f'${v:.1f}B', va='center', fontsize=9)\n\nplt.tight_layout()\nplt.show()\n```\n\n### Financial Performance Summary:\n\n```{python}\n#| label: tbl-financial\n#| tbl-cap: \"Key Financial Metrics\"\n\n# Calculate financial statistics\navg_budget_millions = valid_finance['budget'].mean() / 1e6\navg_revenue_millions = valid_finance['revenue'].mean() / 1e6\navg_roi = valid_roi['roi'].mean()\nmedian_roi = valid_roi['roi'].median()\nprofitable_percentage = (valid_finance['revenue'] > valid_finance['budget']).mean() * 100\n\nfinancial_stats = pd.DataFrame({\n    'Metric': ['Average Budget', 'Average Revenue', 'Average ROI', 'Median ROI', 'Profitable Movies'],\n    'Value': [\n        f\"${avg_budget_millions:.1f}M\",\n        f\"${avg_revenue_millions:.1f}M\", \n        f\"{avg_roi:.1f}%\",\n        f\"{median_roi:.1f}%\",\n        f\"{profitable_percentage:.1f}%\"\n    ]\n})\n\nprint(financial_stats.to_latex(index=False, escape=False))\n```\n\n{{< pagebreak >}}\n\n## Audience Engagement & Ratings Analysis\n\nUnderstanding audience behavior through voting patterns and rating distributions provides insights into viewer preferences and engagement levels.\n\n```{python}\n#| fig-cap: \"Audience Engagement Analysis\"\n#| fig-align: \"center\"\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(14, 10))\n\n# 1. Rating Distribution\nax1.hist(df['vote_average'], bins=30, color='#2E86AB', alpha=0.7, edgecolor='black', linewidth=0.5)\nax1.set_xlabel('Vote Average')\nax1.set_ylabel('Frequency')\nax1.set_title('Rating Distribution', fontweight='bold')\nax1.grid(axis='y', alpha=0.3)\nax1.axvline(df['vote_average'].mean(), color='red', linestyle='--', alpha=0.8, \n           label=f'Mean: {df[\"vote_average\"].mean():.1f}')\nax1.legend()\n\n# 2. Vote Count vs Rating\nhigh_engagement = df[df['vote_count'] > 100]\nax2.scatter(high_engagement['vote_count'], high_engagement['vote_average'], alpha=0.6, s=20, color='#F18F01')\nax2.set_xlabel('Vote Count')\nax2.set_ylabel('Vote Average')\nax2.set_title('Vote Count vs Rating (High Engagement Movies)', fontweight='bold')\nax2.grid(True, alpha=0.3)\n\n# Add correlation line\nif len(high_engagement) > 0:\n    z = np.polyfit(high_engagement['vote_count'], high_engagement['vote_average'], 1)\n    p = np.poly1d(z)\n    ax2.plot(high_engagement['vote_count'], p(high_engagement['vote_count']), \"r--\", alpha=0.8)\n\n# 3. Rating by Runtime\nruntime_bins = pd.cut(df['runtime'], bins=5, labels=['Very Short', 'Short', 'Medium', 'Long', 'Very Long'])\nrating_by_runtime = df.groupby(runtime_bins)['vote_average'].mean()\nbars3 = ax3.bar(range(len(rating_by_runtime)), rating_by_runtime.values, color='#A23B72', alpha=0.8)\nax3.set_xticks(range(len(rating_by_runtime)))\nax3.set_xticklabels(rating_by_runtime.index, rotation=45)\nax3.set_ylabel('Average Rating')\nax3.set_title('Rating by Movie Runtime', fontweight='bold')\nax3.grid(axis='y', alpha=0.3)\n\n# Add value labels\nfor bar in bars3:\n    height = bar.get_height()\n    ax3.text(bar.get_x() + bar.get_width()/2., height + 0.01,\n             f'{height:.1f}', ha='center', va='bottom', fontsize=9)\n\n# 4. Top Rated Movies (minimum 500 votes)\npopular_movies = df[df['vote_count'] >= 500]\ntop_rated = popular_movies.nlargest(10, 'vote_average')[['title', 'vote_average', 'vote_count']]\nbars4 = ax4.barh(range(len(top_rated)), top_rated['vote_average'], color='#C73E1D', alpha=0.8)\nax4.set_yticks(range(len(top_rated)))\nax4.set_yticklabels([f\"{title[:25]}...\" if len(title) > 25 else title for title in top_rated['title']])\nax4.set_xlabel('Vote Average')\nax4.set_title('Top 10 Highest Rated Movies (500+ votes)', fontweight='bold')\nax4.grid(axis='x', alpha=0.3)\n\n# Add value labels\nfor i, v in enumerate(top_rated['vote_average']):\n    ax4.text(v + 0.01*max(top_rated['vote_average']), i, f'{v:.1f}', va='center', fontsize=9)\n\nplt.tight_layout()\nplt.show()\n```\n\n### Audience Insights:\n\n```{python}\n#| output: asis\n\n# Calculate audience insights\navg_rating = df['vote_average'].mean()\navg_votes = df['vote_count'].mean()\nhighly_rated_threshold = 8.0\nhighly_rated_count = (df['vote_average'] >= highly_rated_threshold).sum()\nmost_voted_movie = df.loc[df['vote_count'].idxmax()]\n\nprint(f\"\"\"\n- **Average Movie Rating:** {avg_rating:.1f}/10 across all films\n- **Average Vote Count:** {avg_votes:,.0f} votes per movie\n- **Highly Rated Films:** {highly_rated_count} movies rated {highly_rated_threshold}+ stars\n- **Most Voted Movie:** \"{most_voted_movie['title']}\" with {most_voted_movie['vote_count']:,} votes\n- **Rating Correlation:** {'Positive' if high_engagement['vote_count'].corr(high_engagement['vote_average']) > 0 else 'Negative'} correlation between popularity and rating\n\"\"\")\n```\n\n{{< pagebreak >}}\n\n## Featured Movie Spotlight\n\n```{python}\n#| output: asis\n\n# Select a high-quality movie for spotlight\nfeatured_movies = df[(df['vote_average'] >= 8.0) & (df['vote_count'] >= 1000)]\nif len(featured_movies) > 0:\n    featured = featured_movies.sample(1).iloc[0]\nelse:\n    featured = df.sample(1).iloc[0]\n\n# Format featured movie details\ntitle = featured['title']\nyear = int(featured['release_year']) if pd.notna(featured['release_year']) else 'N/A'\nrating = featured['vote_average']\nvotes = int(featured['vote_count'])\nruntime = int(featured['runtime']) if pd.notna(featured['runtime']) else 'N/A'\nbudget = f\"${featured['budget']/1e6:.1f}M\" if featured['budget'] > 0 else 'N/A'\nrevenue = f\"${featured['revenue']/1e6:.1f}M\" if featured['revenue'] > 0 else 'N/A'\ngenre = featured['primary_genre']\noverview = featured['overview'] if pd.notna(featured['overview']) else 'No description available.'\n\nprint(f\"\"\"\n### 🌟 {title} ({year})\n\n**Genre:** {genre} | **Rating:** ⭐ {rating}/10 | **Votes:** {votes:,} | **Runtime:** {runtime} min\n\n**Financial Performance:**\n- Budget: {budget}\n- Revenue: {revenue}\n\"\"\")\n\nif featured['revenue'] > 0 and featured['budget'] > 0:\n    profit = (featured['revenue'] - featured['budget']) / 1e6\n    roi = ((featured['revenue'] - featured['budget']) / featured['budget']) * 100\n    print(f\"- Profit: ${profit:.1f}M\")\n    print(f\"- ROI: {roi:.1f}%\")\n\nprint(f\"\"\"\n\n**Synopsis:**\n{overview}\n\n---\n\"\"\")\n```\n\n## Key Findings & Conclusions\n\nBased on our comprehensive analysis of the TMDB movie dataset, several important trends and insights emerge:\n\n### 📈 Industry Trends\n\n```{python}\n#| output: asis\n\n# Calculate final insights for conclusion\nrecent_movies = df[df['release_year'] >= 2010]\nclassic_movies = df[df['release_year'] < 1990]\n\nrecent_avg_budget = recent_movies['budget'].mean() / 1e6\nrecent_avg_rating = recent_movies['vote_average'].mean()\nclassic_avg_rating = classic_movies['vote_average'].mean()\n\nmost_profitable_genre = df.groupby('primary_genre')['profit'].mean().idxmax()\nhighest_roi_movie = df.loc[df['roi'].idxmax()] if df['roi'].max() > 0 else None\n\nprint(f\"\"\"\n1. **Production Evolution:** Modern films (2010+) have an average budget of ${recent_avg_budget:.1f}M, reflecting industry growth and inflation.\n\n2. **Quality Consistency:** Recent movies maintain high quality standards with an average rating of {recent_avg_rating:.1f}/10, comparable to classics ({classic_avg_rating:.1f}/10).\n\n3. **Genre Profitability:** {most_profitable_genre} shows the highest average profit margins, indicating strong commercial viability.\n\n4. **Audience Engagement:** Higher vote counts generally correlate with better ratings, suggesting engaged audiences appreciate quality content.\n\"\"\")\n\nif highest_roi_movie is not None:\n    print(f\"\"\"\n5. **Investment Success:** \"{highest_roi_movie['title']}\" achieved the highest ROI at {highest_roi_movie['roi']:.1f}%, demonstrating exceptional financial performance.\n\"\"\")\n```\n\n### 🎯 Strategic Recommendations\n\nBased on the data analysis, the following strategic insights emerge for industry stakeholders:\n\n- **Genre Strategy:** Focus on consistently profitable genres while exploring innovative storytelling within established frameworks\n- **Budget Optimization:** Balance production costs with revenue potential, as higher budgets don't always guarantee higher returns\n- **Audience Engagement:** Prioritize quality storytelling to achieve both critical acclaim and commercial success\n- **Market Timing:** Consider seasonal release patterns and industry production cycles for optimal market positioning\n\n### 📊 Dataset Limitations\n\nThis analysis is based on available TMDB data and may not represent the complete global film industry. Future analyses could benefit from:\n- International box office data inclusion\n- Streaming platform performance metrics  \n- Social media engagement correlations\n- Production company performance analysis\n\n---\n\n*This report was generated on `{python} datetime.now().strftime('%B %d, %Y')` using comprehensive movie data analysis techniques. For questions or additional insights, please contact the analysis team.*\n\n**Report Statistics:**\n- Total movies analyzed: `{python} f\"{len(df):,}\"`\n- Analysis period: `{python} year_range`\n- Genres covered: `{python} df['primary_genre'].nunique()`\n- Data completeness: `{python} f\"{(1 - df.isnull().sum().sum() / (len(df) * len(df.columns))) * 100:.1f}%\"`","srcMarkdownNoYaml":"\n\n## Executive Summary\n\nThis comprehensive analysis examines movie data from The Movie Database (TMDB), providing insights into industry trends, genre preferences, and audience engagement patterns. The dataset encompasses thousands of films with detailed metadata including ratings, revenue, release dates, and audience metrics.\n\n**Key Findings:**\n- Analysis covers movies spanning multiple decades\n- Revenue and rating correlations reveal audience preferences  \n- Genre distribution shows evolving entertainment trends\n- Release patterns indicate industry production cycles\n\n```{python}\n#| include: false\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom datetime import datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Set up matplotlib for better PDF output\nplt.style.use('seaborn-v0_8')\nplt.rcParams['figure.figsize'] = (10, 6)\nplt.rcParams['font.size'] = 10\nplt.rcParams['axes.titlesize'] = 12\nplt.rcParams['axes.labelsize'] = 10\nplt.rcParams['xtick.labelsize'] = 9\nplt.rcParams['ytick.labelsize'] = 9\nplt.rcParams['legend.fontsize'] = 9\n\n# Load and prepare data\ndf = pd.read_csv(\"TMDB-Small.csv\")\ndf['release_year'] = pd.to_datetime(df['release_date'], errors='coerce').dt.year\ndf['primary_genre'] = df['genres'].str.split(',').str[0].str.strip()\ndf['profit'] = df['revenue'] - df['budget']\ndf['roi'] = ((df['revenue'] - df['budget']) / df['budget'] * 100).replace([np.inf, -np.inf], np.nan)\ndf['decade'] = (df['release_year'] // 10) * 10  # Add decade column to main dataframe\n\n# Calculate key statistics\ntotal_movies = len(df)\navg_rating = df['vote_average'].mean()\ntotal_revenue = df['revenue'].sum()\navg_budget = df['budget'].mean()\nyear_range = f\"{int(df['release_year'].min())} - {int(df['release_year'].max())}\"\n```\n\n## Dataset Overview\n\n```{python}\n#| label: tbl-overview\n#| tbl-cap: \"Dataset Summary Statistics\"\n\n# Create overview statistics\noverview_stats = pd.DataFrame({\n    'Metric': ['Total Movies', 'Average Rating', 'Total Revenue (Billions)', \n               'Average Budget (Millions)', 'Year Range', 'Genres Available'],\n    'Value': [\n        f\"{total_movies:,}\",\n        f\"{avg_rating:.1f}/10\",\n        f\"${total_revenue/1e9:.1f}B\",\n        f\"${avg_budget/1e6:.1f}M\",\n        year_range,\n        f\"{df['primary_genre'].nunique()}\"\n    ]\n})\n\nprint(overview_stats.to_latex(index=False, escape=False))\n```\n{{< pagebreak >}}\n\n## Release Year Distribution Analysis\n\nThe temporal distribution of movie releases reveals significant insights about industry production patterns and historical trends in cinema.\n\n```{python}\n#| fig-cap: \"Movie Release Distribution by Year\"\n#| fig-align: \"center\"\n\n# Enhanced release year distribution\nplt.figure(figsize=(12, 7))\n\n# Filter out invalid years\nvalid_years = df[(df['release_year'] >= 1900) & (df['release_year'] <= 2025)]\nyear_counts = valid_years['release_year'].value_counts().sort_index()\n\n# Create the plot\nplt.subplot(2, 1, 1)\nplt.plot(year_counts.index, year_counts.values, linewidth=2, color='#2E86AB', alpha=0.8)\nplt.fill_between(year_counts.index, year_counts.values, alpha=0.3, color='#2E86AB')\nplt.title('Movie Releases by Year', fontsize=14, fontweight='bold', pad=20)\nplt.xlabel('Release Year')\nplt.ylabel('Number of Movies')\nplt.grid(True, alpha=0.3)\n\n# Add decade analysis\nplt.subplot(2, 1, 2)\ndecade_counts = valid_years['decade'].value_counts().sort_index()\ndecade_labels = [f\"{int(d)}s\" for d in decade_counts.index]\n\nbars = plt.bar(decade_labels, decade_counts.values, color='#A23B72', alpha=0.7, edgecolor='black', linewidth=0.5)\nplt.title('Movie Releases by Decade', fontsize=14, fontweight='bold', pad=20)\nplt.xlabel('Decade')\nplt.ylabel('Number of Movies')\nplt.xticks(rotation=45)\n\n# Add value labels on bars\nfor bar in bars:\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2., height + 0.01*max(decade_counts),\n             f'{int(height)}', ha='center', va='bottom', fontsize=9)\n\nplt.tight_layout()\nplt.show()\n```\n\n### Key Observations:\n\n```{python}\n#| output: asis\n\n# Calculate insights\npeak_year = year_counts.idxmax()\npeak_count = year_counts.max()\nrecent_trend = year_counts.tail(5).mean()\nearly_trend = year_counts.head(10).mean()\n\nprint(f\"\"\"\n- **Peak Production Year:** {int(peak_year)} with {peak_count} releases\n- **Recent 5-Year Average:** {recent_trend:.1f} movies per year\n- **Decade with Most Films:** {decade_counts.idxmax():.0f}s with {decade_counts.max()} total releases\n- **Production Growth:** {'Increasing' if recent_trend > early_trend else 'Decreasing'} trend in recent years\n\"\"\")\n```\n\n{{< pagebreak >}}\n\n## Genre Analysis & Market Trends\n\nUnderstanding genre distribution and performance provides crucial insights into audience preferences and market dynamics.\n\n```{python}\n#| fig-cap: \"Genre Distribution and Performance Analysis\"\n#| fig-align: \"center\"\n\n# Enhanced genre analysis\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(14, 10))\n\n# 1. Genre Distribution (Top 10)\ntop_genres = df['primary_genre'].value_counts().head(10)\nax1.barh(range(len(top_genres)), top_genres.values, color='#F18F01', alpha=0.8)\nax1.set_yticks(range(len(top_genres)))\nax1.set_yticklabels(top_genres.index)\nax1.set_xlabel('Number of Movies')\nax1.set_title('Top 10 Genres by Count', fontweight='bold')\nax1.grid(axis='x', alpha=0.3)\n\n# Add value labels\nfor i, v in enumerate(top_genres.values):\n    ax1.text(v + 0.01*max(top_genres.values), i, str(v), va='center', fontsize=9)\n\n# 2. Average Rating by Genre\ngenre_ratings = df.groupby('primary_genre')['vote_average'].mean().sort_values(ascending=False).head(10)\nbars2 = ax2.bar(range(len(genre_ratings)), genre_ratings.values, color='#C73E1D', alpha=0.8)\nax2.set_xticks(range(len(genre_ratings)))\nax2.set_xticklabels(genre_ratings.index, rotation=45, ha='right')\nax2.set_ylabel('Average Rating')\nax2.set_title('Average Rating by Genre (Top 10)', fontweight='bold')\nax2.grid(axis='y', alpha=0.3)\n\n# Add value labels\nfor bar in bars2:\n    height = bar.get_height()\n    ax2.text(bar.get_x() + bar.get_width()/2., height + 0.01,\n             f'{height:.1f}', ha='center', va='bottom', fontsize=9)\n\n# 3. Revenue by Genre (Top 10)\ngenre_revenue = df.groupby('primary_genre')['revenue'].sum().sort_values(ascending=False).head(10)\ngenre_revenue_billions = genre_revenue / 1e9\nbars3 = ax3.bar(range(len(genre_revenue_billions)), genre_revenue_billions.values, color='#3E92CC', alpha=0.8)\nax3.set_xticks(range(len(genre_revenue_billions)))\nax3.set_xticklabels(genre_revenue_billions.index, rotation=45, ha='right')\nax3.set_ylabel('Total Revenue (Billions $)')\nax3.set_title('Total Revenue by Genre (Top 10)', fontweight='bold')\nax3.grid(axis='y', alpha=0.3)\n\n# Add value labels\nfor bar in bars3:\n    height = bar.get_height()\n    ax3.text(bar.get_x() + bar.get_width()/2., height + 0.01,\n             f'${height:.1f}B', ha='center', va='bottom', fontsize=9)\n\n# 4. Vote Count vs Rating by Genre (Scatter)\ngenre_stats = df.groupby('primary_genre').agg({\n    'vote_count': 'mean',\n    'vote_average': 'mean',\n    'title': 'count'\n}).reset_index()\ngenre_stats = genre_stats[genre_stats['title'] >= 10]  # Filter genres with at least 10 movies\n\nscatter = ax4.scatter(genre_stats['vote_count'], genre_stats['vote_average'], \n                     s=genre_stats['title']*2, alpha=0.6, c=range(len(genre_stats)), cmap='viridis')\nax4.set_xlabel('Average Vote Count')\nax4.set_ylabel('Average Rating')\nax4.set_title('Genre Performance: Popularity vs Quality', fontweight='bold')\nax4.grid(True, alpha=0.3)\n\n# Add labels for top genres\nfor i, row in genre_stats.iterrows():\n    if row['title'] > 50:  # Label only major genres\n        ax4.annotate(row['primary_genre'], (row['vote_count'], row['vote_average']), \n                    xytext=(5, 5), textcoords='offset points', fontsize=8, alpha=0.8)\n\nplt.tight_layout()\nplt.show()\n```\n\n### Genre Performance Insights:\n\n```{python}\n#| output: asis\n\n# Calculate genre insights\nmost_popular_genre = top_genres.index[0]\nhighest_rated_genre = genre_ratings.index[0]\nhighest_revenue_genre = genre_revenue.index[0]\n\n# Calculate most prolific genre per decade safely\ntry:\n    decade_genre_counts = df.groupby(['decade', 'primary_genre']).size()\n    most_prolific_by_decade = decade_genre_counts.groupby('primary_genre').sum().idxmax()\nexcept:\n    most_prolific_by_decade = most_popular_genre\n\nprint(f\"\"\"\n- **Most Produced Genre:** {most_popular_genre} ({top_genres.iloc[0]} movies)\n- **Highest Rated Genre:** {highest_rated_genre} (Average: {genre_ratings.iloc[0]:.1f}/10)\n- **Highest Revenue Genre:** {highest_revenue_genre} (${genre_revenue.iloc[0]/1e9:.1f}B total)\n- **Market Leader:** {most_popular_genre} dominates both quantity and commercial success\n\"\"\")\n```\n\n{{< pagebreak >}}\n\n## Revenue & Budget Analysis\n\nFinancial performance metrics reveal important patterns in movie production investments and returns.\n\n```{python}\n#| fig-cap: \"Financial Performance Analysis\"\n#| fig-align: \"center\"\n\n# Enhanced financial analysis\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(14, 10))\n\n# 1. Budget vs Revenue Scatter\nvalid_finance = df[(df['budget'] > 0) & (df['revenue'] > 0)]\nax1.scatter(valid_finance['budget']/1e6, valid_finance['revenue']/1e6, alpha=0.6, s=30, color='#2E86AB')\nax1.set_xlabel('Budget (Millions $)')\nax1.set_ylabel('Revenue (Millions $)')\nax1.set_title('Budget vs Revenue Relationship', fontweight='bold')\nax1.grid(True, alpha=0.3)\n\n# Add break-even line\nmax_val = max(valid_finance['budget'].max(), valid_finance['revenue'].max()) / 1e6\nax1.plot([0, max_val], [0, max_val], 'r--', alpha=0.7, label='Break-even line')\nax1.legend()\n\n# 2. ROI Distribution\nvalid_roi = df[(df['roi'].notna()) & (df['roi'] > -100) & (df['roi'] < 1000)]\nax2.hist(valid_roi['roi'], bins=50, color='#F18F01', alpha=0.7, edgecolor='black', linewidth=0.5)\nax2.set_xlabel('Return on Investment (%)')\nax2.set_ylabel('Frequency')\nax2.set_title('ROI Distribution', fontweight='bold')\nax2.grid(axis='y', alpha=0.3)\nax2.axvline(valid_roi['roi'].mean(), color='red', linestyle='--', alpha=0.8, label=f'Mean: {valid_roi[\"roi\"].mean():.1f}%')\nax2.legend()\n\n# 3. Budget trends over time\nbudget_by_year = df[df['budget'] > 0].groupby('release_year')['budget'].mean()\nbudget_by_year = budget_by_year[(budget_by_year.index >= 1980) & (budget_by_year.index <= 2025)]\nax3.plot(budget_by_year.index, budget_by_year.values/1e6, linewidth=2, color='#A23B72', marker='o', markersize=4)\nax3.set_xlabel('Release Year')\nax3.set_ylabel('Average Budget (Millions $)')\nax3.set_title('Average Movie Budget Trends', fontweight='bold')\nax3.grid(True, alpha=0.3)\n\n# 4. Top Revenue Movies\ntop_revenue = df.nlargest(10, 'revenue')[['title', 'revenue', 'release_year']]\ntop_revenue['revenue_billions'] = top_revenue['revenue'] / 1e9\nbars4 = ax4.barh(range(len(top_revenue)), top_revenue['revenue_billions'], color='#C73E1D', alpha=0.8)\nax4.set_yticks(range(len(top_revenue)))\nax4.set_yticklabels([f\"{title[:20]}...\" if len(title) > 20 else title for title in top_revenue['title']])\nax4.set_xlabel('Revenue (Billions $)')\nax4.set_title('Top 10 Highest Grossing Movies', fontweight='bold')\nax4.grid(axis='x', alpha=0.3)\n\n# Add value labels\nfor i, v in enumerate(top_revenue['revenue_billions']):\n    ax4.text(v + 0.01*max(top_revenue['revenue_billions']), i, f'${v:.1f}B', va='center', fontsize=9)\n\nplt.tight_layout()\nplt.show()\n```\n\n### Financial Performance Summary:\n\n```{python}\n#| label: tbl-financial\n#| tbl-cap: \"Key Financial Metrics\"\n\n# Calculate financial statistics\navg_budget_millions = valid_finance['budget'].mean() / 1e6\navg_revenue_millions = valid_finance['revenue'].mean() / 1e6\navg_roi = valid_roi['roi'].mean()\nmedian_roi = valid_roi['roi'].median()\nprofitable_percentage = (valid_finance['revenue'] > valid_finance['budget']).mean() * 100\n\nfinancial_stats = pd.DataFrame({\n    'Metric': ['Average Budget', 'Average Revenue', 'Average ROI', 'Median ROI', 'Profitable Movies'],\n    'Value': [\n        f\"${avg_budget_millions:.1f}M\",\n        f\"${avg_revenue_millions:.1f}M\", \n        f\"{avg_roi:.1f}%\",\n        f\"{median_roi:.1f}%\",\n        f\"{profitable_percentage:.1f}%\"\n    ]\n})\n\nprint(financial_stats.to_latex(index=False, escape=False))\n```\n\n{{< pagebreak >}}\n\n## Audience Engagement & Ratings Analysis\n\nUnderstanding audience behavior through voting patterns and rating distributions provides insights into viewer preferences and engagement levels.\n\n```{python}\n#| fig-cap: \"Audience Engagement Analysis\"\n#| fig-align: \"center\"\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(14, 10))\n\n# 1. Rating Distribution\nax1.hist(df['vote_average'], bins=30, color='#2E86AB', alpha=0.7, edgecolor='black', linewidth=0.5)\nax1.set_xlabel('Vote Average')\nax1.set_ylabel('Frequency')\nax1.set_title('Rating Distribution', fontweight='bold')\nax1.grid(axis='y', alpha=0.3)\nax1.axvline(df['vote_average'].mean(), color='red', linestyle='--', alpha=0.8, \n           label=f'Mean: {df[\"vote_average\"].mean():.1f}')\nax1.legend()\n\n# 2. Vote Count vs Rating\nhigh_engagement = df[df['vote_count'] > 100]\nax2.scatter(high_engagement['vote_count'], high_engagement['vote_average'], alpha=0.6, s=20, color='#F18F01')\nax2.set_xlabel('Vote Count')\nax2.set_ylabel('Vote Average')\nax2.set_title('Vote Count vs Rating (High Engagement Movies)', fontweight='bold')\nax2.grid(True, alpha=0.3)\n\n# Add correlation line\nif len(high_engagement) > 0:\n    z = np.polyfit(high_engagement['vote_count'], high_engagement['vote_average'], 1)\n    p = np.poly1d(z)\n    ax2.plot(high_engagement['vote_count'], p(high_engagement['vote_count']), \"r--\", alpha=0.8)\n\n# 3. Rating by Runtime\nruntime_bins = pd.cut(df['runtime'], bins=5, labels=['Very Short', 'Short', 'Medium', 'Long', 'Very Long'])\nrating_by_runtime = df.groupby(runtime_bins)['vote_average'].mean()\nbars3 = ax3.bar(range(len(rating_by_runtime)), rating_by_runtime.values, color='#A23B72', alpha=0.8)\nax3.set_xticks(range(len(rating_by_runtime)))\nax3.set_xticklabels(rating_by_runtime.index, rotation=45)\nax3.set_ylabel('Average Rating')\nax3.set_title('Rating by Movie Runtime', fontweight='bold')\nax3.grid(axis='y', alpha=0.3)\n\n# Add value labels\nfor bar in bars3:\n    height = bar.get_height()\n    ax3.text(bar.get_x() + bar.get_width()/2., height + 0.01,\n             f'{height:.1f}', ha='center', va='bottom', fontsize=9)\n\n# 4. Top Rated Movies (minimum 500 votes)\npopular_movies = df[df['vote_count'] >= 500]\ntop_rated = popular_movies.nlargest(10, 'vote_average')[['title', 'vote_average', 'vote_count']]\nbars4 = ax4.barh(range(len(top_rated)), top_rated['vote_average'], color='#C73E1D', alpha=0.8)\nax4.set_yticks(range(len(top_rated)))\nax4.set_yticklabels([f\"{title[:25]}...\" if len(title) > 25 else title for title in top_rated['title']])\nax4.set_xlabel('Vote Average')\nax4.set_title('Top 10 Highest Rated Movies (500+ votes)', fontweight='bold')\nax4.grid(axis='x', alpha=0.3)\n\n# Add value labels\nfor i, v in enumerate(top_rated['vote_average']):\n    ax4.text(v + 0.01*max(top_rated['vote_average']), i, f'{v:.1f}', va='center', fontsize=9)\n\nplt.tight_layout()\nplt.show()\n```\n\n### Audience Insights:\n\n```{python}\n#| output: asis\n\n# Calculate audience insights\navg_rating = df['vote_average'].mean()\navg_votes = df['vote_count'].mean()\nhighly_rated_threshold = 8.0\nhighly_rated_count = (df['vote_average'] >= highly_rated_threshold).sum()\nmost_voted_movie = df.loc[df['vote_count'].idxmax()]\n\nprint(f\"\"\"\n- **Average Movie Rating:** {avg_rating:.1f}/10 across all films\n- **Average Vote Count:** {avg_votes:,.0f} votes per movie\n- **Highly Rated Films:** {highly_rated_count} movies rated {highly_rated_threshold}+ stars\n- **Most Voted Movie:** \"{most_voted_movie['title']}\" with {most_voted_movie['vote_count']:,} votes\n- **Rating Correlation:** {'Positive' if high_engagement['vote_count'].corr(high_engagement['vote_average']) > 0 else 'Negative'} correlation between popularity and rating\n\"\"\")\n```\n\n{{< pagebreak >}}\n\n## Featured Movie Spotlight\n\n```{python}\n#| output: asis\n\n# Select a high-quality movie for spotlight\nfeatured_movies = df[(df['vote_average'] >= 8.0) & (df['vote_count'] >= 1000)]\nif len(featured_movies) > 0:\n    featured = featured_movies.sample(1).iloc[0]\nelse:\n    featured = df.sample(1).iloc[0]\n\n# Format featured movie details\ntitle = featured['title']\nyear = int(featured['release_year']) if pd.notna(featured['release_year']) else 'N/A'\nrating = featured['vote_average']\nvotes = int(featured['vote_count'])\nruntime = int(featured['runtime']) if pd.notna(featured['runtime']) else 'N/A'\nbudget = f\"${featured['budget']/1e6:.1f}M\" if featured['budget'] > 0 else 'N/A'\nrevenue = f\"${featured['revenue']/1e6:.1f}M\" if featured['revenue'] > 0 else 'N/A'\ngenre = featured['primary_genre']\noverview = featured['overview'] if pd.notna(featured['overview']) else 'No description available.'\n\nprint(f\"\"\"\n### 🌟 {title} ({year})\n\n**Genre:** {genre} | **Rating:** ⭐ {rating}/10 | **Votes:** {votes:,} | **Runtime:** {runtime} min\n\n**Financial Performance:**\n- Budget: {budget}\n- Revenue: {revenue}\n\"\"\")\n\nif featured['revenue'] > 0 and featured['budget'] > 0:\n    profit = (featured['revenue'] - featured['budget']) / 1e6\n    roi = ((featured['revenue'] - featured['budget']) / featured['budget']) * 100\n    print(f\"- Profit: ${profit:.1f}M\")\n    print(f\"- ROI: {roi:.1f}%\")\n\nprint(f\"\"\"\n\n**Synopsis:**\n{overview}\n\n---\n\"\"\")\n```\n\n## Key Findings & Conclusions\n\nBased on our comprehensive analysis of the TMDB movie dataset, several important trends and insights emerge:\n\n### 📈 Industry Trends\n\n```{python}\n#| output: asis\n\n# Calculate final insights for conclusion\nrecent_movies = df[df['release_year'] >= 2010]\nclassic_movies = df[df['release_year'] < 1990]\n\nrecent_avg_budget = recent_movies['budget'].mean() / 1e6\nrecent_avg_rating = recent_movies['vote_average'].mean()\nclassic_avg_rating = classic_movies['vote_average'].mean()\n\nmost_profitable_genre = df.groupby('primary_genre')['profit'].mean().idxmax()\nhighest_roi_movie = df.loc[df['roi'].idxmax()] if df['roi'].max() > 0 else None\n\nprint(f\"\"\"\n1. **Production Evolution:** Modern films (2010+) have an average budget of ${recent_avg_budget:.1f}M, reflecting industry growth and inflation.\n\n2. **Quality Consistency:** Recent movies maintain high quality standards with an average rating of {recent_avg_rating:.1f}/10, comparable to classics ({classic_avg_rating:.1f}/10).\n\n3. **Genre Profitability:** {most_profitable_genre} shows the highest average profit margins, indicating strong commercial viability.\n\n4. **Audience Engagement:** Higher vote counts generally correlate with better ratings, suggesting engaged audiences appreciate quality content.\n\"\"\")\n\nif highest_roi_movie is not None:\n    print(f\"\"\"\n5. **Investment Success:** \"{highest_roi_movie['title']}\" achieved the highest ROI at {highest_roi_movie['roi']:.1f}%, demonstrating exceptional financial performance.\n\"\"\")\n```\n\n### 🎯 Strategic Recommendations\n\nBased on the data analysis, the following strategic insights emerge for industry stakeholders:\n\n- **Genre Strategy:** Focus on consistently profitable genres while exploring innovative storytelling within established frameworks\n- **Budget Optimization:** Balance production costs with revenue potential, as higher budgets don't always guarantee higher returns\n- **Audience Engagement:** Prioritize quality storytelling to achieve both critical acclaim and commercial success\n- **Market Timing:** Consider seasonal release patterns and industry production cycles for optimal market positioning\n\n### 📊 Dataset Limitations\n\nThis analysis is based on available TMDB data and may not represent the complete global film industry. Future analyses could benefit from:\n- International box office data inclusion\n- Streaming platform performance metrics  \n- Social media engagement correlations\n- Production company performance analysis\n\n---\n\n*This report was generated on `{python} datetime.now().strftime('%B %d, %Y')` using comprehensive movie data analysis techniques. For questions or additional insights, please contact the analysis team.*\n\n**Report Statistics:**\n- Total movies analyzed: `{python} f\"{len(df):,}\"`\n- Analysis period: `{python} year_range`\n- Genres covered: `{python} df['primary_genre'].nunique()`\n- Data completeness: `{python} f\"{(1 - df.isnull().sum().sum() / (len(df) * len(df.columns))) * 100:.1f}%\"`"},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","include-in-header":{"text":"\\usepackage{fancyhdr}\n\\usepackage{graphicx}\n\\usepackage{booktabs}\n\\usepackage{longtable}\n\\usepackage{array}\n\\usepackage{multirow}\n\\usepackage{wrapfig}\n\\usepackage{float}\n\\usepackage{colortbl}\n\\usepackage{pdflscape}\n\\usepackage{tabu}\n\\usepackage{threeparttable}\n\\pagestyle{fancy}\n\\fancyhf{}\n\\fancyhead[L]{\\textbf{Movie Data Analysis}}\n\\fancyhead[R]{\\thepage}\n\\fancyfoot[C]{TMDB Dataset Analysis Report}\n"},"toc":true,"toc-depth":3,"number-sections":true,"output-file":"pdf-report.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"title":"🎬 Comprehensive Movie Data Analysis","subtitle":"TMDB Dataset Insights & Trends","author":"Vineet Sahoo","date":"today","date-format":"MMMM DD, YYYY","message":false,"documentclass":"article","geometry":["margin=0.8in","paperwidth=8.5in","paperheight=11in"],"fontsize":"11pt","colorlinks":true,"linkcolor":"blue","urlcolor":"blue","citecolor":"blue","fig-cap-location":"bottom"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":[]}