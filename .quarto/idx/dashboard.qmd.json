{"title":"üé¨ TMDB Movie Analytics Dashboard","markdown":{"yaml":{"format":{"dashboard":{"theme":["default","style.css"],"logo":"https://raw.githubusercontent.com/quarto-dev/quarto-web/main/favicon.png","nav-buttons":[{"icon":"github","href":"https://github.com/"}]}},"title":"üé¨ TMDB Movie Analytics Dashboard","author":"Vineet Sahoo","orientation":"columns"},"headingText":"Load and process data","containsRefs":false,"markdown":"\n\n```{python}\n#| include: false\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\n\ndf = pd.read_csv(\"TMDB-Small.csv\")\ndf['primary_genre'] = df['genres'].str.split(',').str[0].str.strip()\ndf['release_year'] = pd.to_datetime(df['release_date']).dt.year\ndf['revenue_millions'] = df['revenue'] / 1_000_000\ndf['budget_millions'] = df['budget'] / 1_000_000\ndf['profit_millions'] = df['revenue_millions'] - df['budget_millions']\n\n# Filter for major genres\ncomedy = df[df['primary_genre'] == 'Comedy']\ndrama = df[df['primary_genre'] == 'Drama']\naction = df[df['primary_genre'] == 'Action']\n\n# Color schemes\ncomedy_colors = [\"#FF6B9D\", \"#FF8E9B\", \"#FFB3BA\"]\ndrama_colors = [\"#4A90E2\", \"#7BB3F0\", \"#A8D0F7\"] \naction_colors = [\"#FF6B35\", \"#FF8A5B\", \"#FFA07A\"]\ngeneral_colors = [\"#6C5CE7\", \"#A29BFE\", \"#74B9FF\"]\n```\n\n# üìä Overview\n\n## Row {height=30%}\n\n```{python}\n#| component: valuebox\n#| title: \"üé≠ Total Movies\"\ndict(\n    icon = \"film\",\n    color = \"primary\",\n    value = f\"{len(df):,}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"‚≠ê Average Rating\"\ndict(\n    icon = \"star-fill\",\n    color = \"warning\",\n    value = f\"{df['vote_average'].mean():.1f}/10\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"üí∞ Total Revenue\"\ndict(\n    icon = \"currency-dollar\",\n    color = \"success\",\n    value = f\"${df['revenue'].sum()/1e9:.1f}B\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"üé¨ Top Genre\"\ndict(\n    icon = \"trophy-fill\",\n    color = \"info\",\n    value = df['primary_genre'].value_counts().index[0],\n)\n```\n\n## Row {height=70%}\n\n### Column {width=60%}\n\n```{python}\n#| title: \"üìà Genre Performance Analysis\"\n#| padding: 0\n\n# Create genre summary\ngenre_stats = df.groupby('primary_genre').agg({\n    'vote_average': 'mean',\n    'vote_count': 'mean',\n    'revenue': 'mean',\n    'id': 'count'\n}).round(2)\n\ngenre_stats.columns = ['Avg Rating', 'Avg Votes', 'Avg Revenue', 'Movie Count']\ngenre_stats = genre_stats[genre_stats['Movie Count'] >= 10].sort_values('Avg Rating', ascending=False)\n\nfig = px.scatter(\n    genre_stats.reset_index(), \n    x='Avg Votes', \n    y='Avg Rating',\n    size='Movie Count',\n    color='Avg Revenue',\n    hover_name='primary_genre',\n    title=\"Genre Performance: Rating vs Popularity\",\n    color_continuous_scale=\"Viridis\",\n    size_max=40\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=12),\n    showlegend=False,\n    height=400\n)\n\nfig\n```\n\n### Column {width=40%}\n\n```{python}\n#| title: \"üé≠ Top 10 Genres by Count\"\n\ntop_genres = df['primary_genre'].value_counts().head(10)\n\nfig = px.bar(\n    x=top_genres.values,\n    y=top_genres.index,\n    orientation='h',\n    color=top_genres.values,\n    color_continuous_scale=\"Plasma\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=11),\n    showlegend=False,\n    height=400,\n    yaxis=dict(categoryorder='total ascending'),\n    xaxis_title=\"Number of Movies\",\n    yaxis_title=\"\"\n)\n\nfig\n```\n\n# üòÇ Comedy Analysis\n\n## Row {height=25%}\n\n```{python}\n#| component: valuebox\n#| title: \"üé≠ Comedy Movies\"\ndict(\n    icon = \"emoji-laughing\",\n    color = \"#FF6B9D\",\n    value = f\"{len(comedy):,}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"‚≠ê Avg Rating\"\ndict(\n    icon = \"star-half\",\n    color = \"#FF6B9D\",\n    value = f\"{comedy['vote_average'].mean():.2f}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"üë• Avg Votes\"\ndict(\n    icon = \"people-fill\",\n    color = \"#FF6B9D\",\n    value = f\"{comedy['vote_count'].mean():,.0f}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"üí∞ Best Revenue\"\ndict(\n    icon = \"cash-stack\",\n    color = \"#FF6B9D\",\n    value = f\"${comedy['revenue'].max()/1e6:.0f}M\",\n)\n```\n\n## Row {height=75%}\n\n### Column {.tabset}\n\n#### üìä Rating Distribution\n\n```{python}\n#| title: \"Comedy Movie Ratings Distribution\"\n\nfig = px.histogram(\n    comedy, \n    x='vote_average', \n    nbins=20,\n    color_discrete_sequence=comedy_colors,\n    title=\"Distribution of Comedy Movie Ratings\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Rating (0-10)\",\n    yaxis_title=\"Number of Movies\",\n    showlegend=False\n)\n\nfig.add_vline(x=comedy['vote_average'].mean(), line_dash=\"dash\", \n              annotation_text=f\"Average: {comedy['vote_average'].mean():.1f}\")\n\nfig\n```\n\n#### üí´ Performance Scatter\n\n```{python}\n#| title: \"Comedy: Votes vs Rating Performance\"\n\nfig = px.scatter(\n    comedy, \n    x='vote_count', \n    y='vote_average', \n    hover_data=['title', 'release_year'],\n    color='revenue',\n    size='popularity',\n    color_continuous_scale=\"Reds\",\n    title=\"Comedy Movies: Popularity vs Quality\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Vote Count\",\n    yaxis_title=\"Average Rating\",\n    height=400\n)\n\nfig\n```\n\n#### üìÖ Timeline\n\n```{python}\n#| title: \"Comedy Movies Over Time\"\n\ncomedy_yearly = comedy.groupby('release_year').agg({\n    'id': 'count',\n    'vote_average': 'mean',\n    'revenue': 'mean'\n}).reset_index()\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(\n    go.Scatter(x=comedy_yearly['release_year'], y=comedy_yearly['id'],\n               name=\"Movie Count\", line=dict(color='#FF6B9D', width=3)),\n    secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=comedy_yearly['release_year'], y=comedy_yearly['vote_average'],\n               name=\"Avg Rating\", line=dict(color='#FFB3BA', width=2, dash='dash')),\n    secondary_y=True,\n)\n\nfig.update_xaxes(title_text=\"Year\")\nfig.update_yaxes(title_text=\"Number of Movies\", secondary_y=False)\nfig.update_yaxes(title_text=\"Average Rating\", secondary_y=True)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    height=400,\n    title=\"Comedy Movie Trends Over Time\"\n)\n\nfig\n```\n\n# üé≠ Drama Analysis\n\n## Row {height=25%}\n\n```{python}\n#| component: valuebox\n#| title: \"üé≠ Drama Movies\"\ndict(\n    icon = \"mask-face\",\n    color = \"#4A90E2\",\n    value = f\"{len(drama):,}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"‚≠ê Avg Rating\"\ndict(\n    icon = \"star-fill\",\n    color = \"#4A90E2\",\n    value = f\"{drama['vote_average'].mean():.2f}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"üèÜ Top Rated\"\ndict(\n    icon = \"trophy\",\n    color = \"#4A90E2\",\n    value = f\"{drama['vote_average'].max():.1f}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"‚è±Ô∏è Avg Runtime\"\ndict(\n    icon = \"clock\",\n    color = \"#4A90E2\",\n    value = f\"{drama['runtime'].mean():.0f}m\",\n)\n```\n\n## Row {height=75%}\n\n### Column {.tabset}\n\n#### üìä Rating Distribution\n\n```{python}\n#| title: \"Drama Movie Ratings Distribution\"\n\nfig = px.histogram(\n    drama, \n    x='vote_average', \n    nbins=20,\n    color_discrete_sequence=drama_colors,\n    title=\"Distribution of Drama Movie Ratings\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Rating (0-10)\",\n    yaxis_title=\"Number of Movies\",\n    showlegend=False\n)\n\nfig.add_vline(x=drama['vote_average'].mean(), line_dash=\"dash\", \n              annotation_text=f\"Average: {drama['vote_average'].mean():.1f}\")\n\nfig\n```\n\n#### üí∞ Financial Performance\n\n```{python}\n#| title: \"Drama: Revenue vs Budget Analysis\"\n\ndrama_finance = drama[(drama['revenue'] > 0) & (drama['budget'] > 0)].copy()\n\nfig = px.scatter(\n    drama_finance,\n    x='budget_millions',\n    y='revenue_millions',\n    hover_data=['title', 'vote_average'],\n    color='vote_average',\n    size='vote_count',\n    color_continuous_scale=\"Blues\",\n    title=\"Drama Movies: Budget vs Revenue Performance\"\n)\n\n# Add break-even line\nmax_val = max(drama_finance['budget_millions'].max(), drama_finance['revenue_millions'].max())\nfig.add_trace(go.Scatter(x=[0, max_val], y=[0, max_val], \n                        mode='lines', name='Break-even Line',\n                        line=dict(dash='dash', color='red')))\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Budget (Millions USD)\",\n    yaxis_title=\"Revenue (Millions USD)\",\n    height=400\n)\n\nfig\n```\n\n#### üèÜ Top Performers\n\n```{python}\n#| title: \"Top 15 Drama Movies by Rating\"\n\ntop_dramas = drama.nlargest(15, 'vote_average')[['title', 'vote_average', 'vote_count', 'release_year']]\n\nfig = px.bar(\n    top_dramas,\n    x='vote_average',\n    y='title',\n    orientation='h',\n    color='vote_count',\n    hover_data=['release_year'],\n    color_continuous_scale=\"Blues\",\n    title=\"Highest Rated Drama Movies\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    yaxis=dict(categoryorder='total ascending'),\n    xaxis_title=\"Average Rating\",\n    yaxis_title=\"\",\n    height=400\n)\n\nfig\n```\n\n# üöÄ Comparative Analysis\n\n## Row {height=40%}\n\n```{python}\n#| title: \"üé≠ Comedy vs Drama: Key Metrics Comparison\"\n#| padding: 0\n\nmetrics_comparison = pd.DataFrame({\n    'Metric': ['Count', 'Avg Rating', 'Avg Revenue (M)', 'Avg Budget (M)', 'Avg Runtime'],\n    'Comedy': [\n        len(comedy),\n        comedy['vote_average'].mean(),\n        comedy['revenue'].mean() / 1e6,\n        comedy['budget'].mean() / 1e6,\n        comedy['runtime'].mean()\n    ],\n    'Drama': [\n        len(drama),\n        drama['vote_average'].mean(),\n        drama['revenue'].mean() / 1e6,\n        drama['budget'].mean() / 1e6,\n        drama['runtime'].mean()\n    ]\n})\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    name='Comedy',\n    x=metrics_comparison['Metric'],\n    y=metrics_comparison['Comedy'],\n    marker_color='#FF6B9D',\n    text=metrics_comparison['Comedy'].round(1),\n    textposition='outside'\n))\n\nfig.add_trace(go.Bar(\n    name='Drama',\n    x=metrics_comparison['Metric'],\n    y=metrics_comparison['Drama'],\n    marker_color='#4A90E2',\n    text=metrics_comparison['Drama'].round(1),\n    textposition='outside'\n))\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    barmode='group',\n    title=\"Comedy vs Drama: Side-by-Side Comparison\",\n    height=300,\n    showlegend=True\n)\n\nfig\n```\n\n## Row {height=60%}\n\n### Column {width=50%}\n\n```{python}\n#| title: \"üé¨ Genre Evolution Timeline\"\n\n# Create yearly comparison\nyearly_comparison = df[df['primary_genre'].isin(['Comedy', 'Drama', 'Action'])].groupby(['release_year', 'primary_genre']).size().reset_index(name='count')\n\nfig = px.line(\n    yearly_comparison,\n    x='release_year',\n    y='count',\n    color='primary_genre',\n    title=\"Genre Popularity Over Time\",\n    color_discrete_map={'Comedy': '#FF6B9D', 'Drama': '#4A90E2', 'Action': '#FF6B35'}\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Year\",\n    yaxis_title=\"Number of Movies\",\n    height=350,\n    legend_title=\"Genre\"\n)\n\nfig\n```\n\n### Column {width=50%}\n\n```{python}\n#| title: \"üí∞ Revenue Distribution by Genre\"\n\nrevenue_data = df[df['revenue'] > 0]\ntop_revenue_genres = revenue_data.groupby('primary_genre')['revenue'].sum().nlargest(8).index\nrevenue_filtered = revenue_data[revenue_data['primary_genre'].isin(top_revenue_genres)]\n\nfig = px.box(\n    revenue_filtered,\n    x='primary_genre',\n    y='revenue',\n    color='primary_genre',\n    title=\"Revenue Distribution Across Top Genres\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Genre\",\n    yaxis_title=\"Revenue (USD)\",\n    showlegend=False,\n    height=350,\n    xaxis_tickangle=45,\n    yaxis_type=\"log\"\n)\n\nfig\n```\n","srcMarkdownNoYaml":"\n\n```{python}\n#| include: false\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport numpy as np\n\n# Load and process data\ndf = pd.read_csv(\"TMDB-Small.csv\")\ndf['primary_genre'] = df['genres'].str.split(',').str[0].str.strip()\ndf['release_year'] = pd.to_datetime(df['release_date']).dt.year\ndf['revenue_millions'] = df['revenue'] / 1_000_000\ndf['budget_millions'] = df['budget'] / 1_000_000\ndf['profit_millions'] = df['revenue_millions'] - df['budget_millions']\n\n# Filter for major genres\ncomedy = df[df['primary_genre'] == 'Comedy']\ndrama = df[df['primary_genre'] == 'Drama']\naction = df[df['primary_genre'] == 'Action']\n\n# Color schemes\ncomedy_colors = [\"#FF6B9D\", \"#FF8E9B\", \"#FFB3BA\"]\ndrama_colors = [\"#4A90E2\", \"#7BB3F0\", \"#A8D0F7\"] \naction_colors = [\"#FF6B35\", \"#FF8A5B\", \"#FFA07A\"]\ngeneral_colors = [\"#6C5CE7\", \"#A29BFE\", \"#74B9FF\"]\n```\n\n# üìä Overview\n\n## Row {height=30%}\n\n```{python}\n#| component: valuebox\n#| title: \"üé≠ Total Movies\"\ndict(\n    icon = \"film\",\n    color = \"primary\",\n    value = f\"{len(df):,}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"‚≠ê Average Rating\"\ndict(\n    icon = \"star-fill\",\n    color = \"warning\",\n    value = f\"{df['vote_average'].mean():.1f}/10\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"üí∞ Total Revenue\"\ndict(\n    icon = \"currency-dollar\",\n    color = \"success\",\n    value = f\"${df['revenue'].sum()/1e9:.1f}B\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"üé¨ Top Genre\"\ndict(\n    icon = \"trophy-fill\",\n    color = \"info\",\n    value = df['primary_genre'].value_counts().index[0],\n)\n```\n\n## Row {height=70%}\n\n### Column {width=60%}\n\n```{python}\n#| title: \"üìà Genre Performance Analysis\"\n#| padding: 0\n\n# Create genre summary\ngenre_stats = df.groupby('primary_genre').agg({\n    'vote_average': 'mean',\n    'vote_count': 'mean',\n    'revenue': 'mean',\n    'id': 'count'\n}).round(2)\n\ngenre_stats.columns = ['Avg Rating', 'Avg Votes', 'Avg Revenue', 'Movie Count']\ngenre_stats = genre_stats[genre_stats['Movie Count'] >= 10].sort_values('Avg Rating', ascending=False)\n\nfig = px.scatter(\n    genre_stats.reset_index(), \n    x='Avg Votes', \n    y='Avg Rating',\n    size='Movie Count',\n    color='Avg Revenue',\n    hover_name='primary_genre',\n    title=\"Genre Performance: Rating vs Popularity\",\n    color_continuous_scale=\"Viridis\",\n    size_max=40\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=12),\n    showlegend=False,\n    height=400\n)\n\nfig\n```\n\n### Column {width=40%}\n\n```{python}\n#| title: \"üé≠ Top 10 Genres by Count\"\n\ntop_genres = df['primary_genre'].value_counts().head(10)\n\nfig = px.bar(\n    x=top_genres.values,\n    y=top_genres.index,\n    orientation='h',\n    color=top_genres.values,\n    color_continuous_scale=\"Plasma\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    font=dict(size=11),\n    showlegend=False,\n    height=400,\n    yaxis=dict(categoryorder='total ascending'),\n    xaxis_title=\"Number of Movies\",\n    yaxis_title=\"\"\n)\n\nfig\n```\n\n# üòÇ Comedy Analysis\n\n## Row {height=25%}\n\n```{python}\n#| component: valuebox\n#| title: \"üé≠ Comedy Movies\"\ndict(\n    icon = \"emoji-laughing\",\n    color = \"#FF6B9D\",\n    value = f\"{len(comedy):,}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"‚≠ê Avg Rating\"\ndict(\n    icon = \"star-half\",\n    color = \"#FF6B9D\",\n    value = f\"{comedy['vote_average'].mean():.2f}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"üë• Avg Votes\"\ndict(\n    icon = \"people-fill\",\n    color = \"#FF6B9D\",\n    value = f\"{comedy['vote_count'].mean():,.0f}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"üí∞ Best Revenue\"\ndict(\n    icon = \"cash-stack\",\n    color = \"#FF6B9D\",\n    value = f\"${comedy['revenue'].max()/1e6:.0f}M\",\n)\n```\n\n## Row {height=75%}\n\n### Column {.tabset}\n\n#### üìä Rating Distribution\n\n```{python}\n#| title: \"Comedy Movie Ratings Distribution\"\n\nfig = px.histogram(\n    comedy, \n    x='vote_average', \n    nbins=20,\n    color_discrete_sequence=comedy_colors,\n    title=\"Distribution of Comedy Movie Ratings\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Rating (0-10)\",\n    yaxis_title=\"Number of Movies\",\n    showlegend=False\n)\n\nfig.add_vline(x=comedy['vote_average'].mean(), line_dash=\"dash\", \n              annotation_text=f\"Average: {comedy['vote_average'].mean():.1f}\")\n\nfig\n```\n\n#### üí´ Performance Scatter\n\n```{python}\n#| title: \"Comedy: Votes vs Rating Performance\"\n\nfig = px.scatter(\n    comedy, \n    x='vote_count', \n    y='vote_average', \n    hover_data=['title', 'release_year'],\n    color='revenue',\n    size='popularity',\n    color_continuous_scale=\"Reds\",\n    title=\"Comedy Movies: Popularity vs Quality\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Vote Count\",\n    yaxis_title=\"Average Rating\",\n    height=400\n)\n\nfig\n```\n\n#### üìÖ Timeline\n\n```{python}\n#| title: \"Comedy Movies Over Time\"\n\ncomedy_yearly = comedy.groupby('release_year').agg({\n    'id': 'count',\n    'vote_average': 'mean',\n    'revenue': 'mean'\n}).reset_index()\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\nfig.add_trace(\n    go.Scatter(x=comedy_yearly['release_year'], y=comedy_yearly['id'],\n               name=\"Movie Count\", line=dict(color='#FF6B9D', width=3)),\n    secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=comedy_yearly['release_year'], y=comedy_yearly['vote_average'],\n               name=\"Avg Rating\", line=dict(color='#FFB3BA', width=2, dash='dash')),\n    secondary_y=True,\n)\n\nfig.update_xaxes(title_text=\"Year\")\nfig.update_yaxes(title_text=\"Number of Movies\", secondary_y=False)\nfig.update_yaxes(title_text=\"Average Rating\", secondary_y=True)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    height=400,\n    title=\"Comedy Movie Trends Over Time\"\n)\n\nfig\n```\n\n# üé≠ Drama Analysis\n\n## Row {height=25%}\n\n```{python}\n#| component: valuebox\n#| title: \"üé≠ Drama Movies\"\ndict(\n    icon = \"mask-face\",\n    color = \"#4A90E2\",\n    value = f\"{len(drama):,}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"‚≠ê Avg Rating\"\ndict(\n    icon = \"star-fill\",\n    color = \"#4A90E2\",\n    value = f\"{drama['vote_average'].mean():.2f}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"üèÜ Top Rated\"\ndict(\n    icon = \"trophy\",\n    color = \"#4A90E2\",\n    value = f\"{drama['vote_average'].max():.1f}\",\n)\n```\n\n```{python}\n#| component: valuebox\n#| title: \"‚è±Ô∏è Avg Runtime\"\ndict(\n    icon = \"clock\",\n    color = \"#4A90E2\",\n    value = f\"{drama['runtime'].mean():.0f}m\",\n)\n```\n\n## Row {height=75%}\n\n### Column {.tabset}\n\n#### üìä Rating Distribution\n\n```{python}\n#| title: \"Drama Movie Ratings Distribution\"\n\nfig = px.histogram(\n    drama, \n    x='vote_average', \n    nbins=20,\n    color_discrete_sequence=drama_colors,\n    title=\"Distribution of Drama Movie Ratings\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Rating (0-10)\",\n    yaxis_title=\"Number of Movies\",\n    showlegend=False\n)\n\nfig.add_vline(x=drama['vote_average'].mean(), line_dash=\"dash\", \n              annotation_text=f\"Average: {drama['vote_average'].mean():.1f}\")\n\nfig\n```\n\n#### üí∞ Financial Performance\n\n```{python}\n#| title: \"Drama: Revenue vs Budget Analysis\"\n\ndrama_finance = drama[(drama['revenue'] > 0) & (drama['budget'] > 0)].copy()\n\nfig = px.scatter(\n    drama_finance,\n    x='budget_millions',\n    y='revenue_millions',\n    hover_data=['title', 'vote_average'],\n    color='vote_average',\n    size='vote_count',\n    color_continuous_scale=\"Blues\",\n    title=\"Drama Movies: Budget vs Revenue Performance\"\n)\n\n# Add break-even line\nmax_val = max(drama_finance['budget_millions'].max(), drama_finance['revenue_millions'].max())\nfig.add_trace(go.Scatter(x=[0, max_val], y=[0, max_val], \n                        mode='lines', name='Break-even Line',\n                        line=dict(dash='dash', color='red')))\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Budget (Millions USD)\",\n    yaxis_title=\"Revenue (Millions USD)\",\n    height=400\n)\n\nfig\n```\n\n#### üèÜ Top Performers\n\n```{python}\n#| title: \"Top 15 Drama Movies by Rating\"\n\ntop_dramas = drama.nlargest(15, 'vote_average')[['title', 'vote_average', 'vote_count', 'release_year']]\n\nfig = px.bar(\n    top_dramas,\n    x='vote_average',\n    y='title',\n    orientation='h',\n    color='vote_count',\n    hover_data=['release_year'],\n    color_continuous_scale=\"Blues\",\n    title=\"Highest Rated Drama Movies\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    yaxis=dict(categoryorder='total ascending'),\n    xaxis_title=\"Average Rating\",\n    yaxis_title=\"\",\n    height=400\n)\n\nfig\n```\n\n# üöÄ Comparative Analysis\n\n## Row {height=40%}\n\n```{python}\n#| title: \"üé≠ Comedy vs Drama: Key Metrics Comparison\"\n#| padding: 0\n\nmetrics_comparison = pd.DataFrame({\n    'Metric': ['Count', 'Avg Rating', 'Avg Revenue (M)', 'Avg Budget (M)', 'Avg Runtime'],\n    'Comedy': [\n        len(comedy),\n        comedy['vote_average'].mean(),\n        comedy['revenue'].mean() / 1e6,\n        comedy['budget'].mean() / 1e6,\n        comedy['runtime'].mean()\n    ],\n    'Drama': [\n        len(drama),\n        drama['vote_average'].mean(),\n        drama['revenue'].mean() / 1e6,\n        drama['budget'].mean() / 1e6,\n        drama['runtime'].mean()\n    ]\n})\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    name='Comedy',\n    x=metrics_comparison['Metric'],\n    y=metrics_comparison['Comedy'],\n    marker_color='#FF6B9D',\n    text=metrics_comparison['Comedy'].round(1),\n    textposition='outside'\n))\n\nfig.add_trace(go.Bar(\n    name='Drama',\n    x=metrics_comparison['Metric'],\n    y=metrics_comparison['Drama'],\n    marker_color='#4A90E2',\n    text=metrics_comparison['Drama'].round(1),\n    textposition='outside'\n))\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    barmode='group',\n    title=\"Comedy vs Drama: Side-by-Side Comparison\",\n    height=300,\n    showlegend=True\n)\n\nfig\n```\n\n## Row {height=60%}\n\n### Column {width=50%}\n\n```{python}\n#| title: \"üé¨ Genre Evolution Timeline\"\n\n# Create yearly comparison\nyearly_comparison = df[df['primary_genre'].isin(['Comedy', 'Drama', 'Action'])].groupby(['release_year', 'primary_genre']).size().reset_index(name='count')\n\nfig = px.line(\n    yearly_comparison,\n    x='release_year',\n    y='count',\n    color='primary_genre',\n    title=\"Genre Popularity Over Time\",\n    color_discrete_map={'Comedy': '#FF6B9D', 'Drama': '#4A90E2', 'Action': '#FF6B35'}\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Year\",\n    yaxis_title=\"Number of Movies\",\n    height=350,\n    legend_title=\"Genre\"\n)\n\nfig\n```\n\n### Column {width=50%}\n\n```{python}\n#| title: \"üí∞ Revenue Distribution by Genre\"\n\nrevenue_data = df[df['revenue'] > 0]\ntop_revenue_genres = revenue_data.groupby('primary_genre')['revenue'].sum().nlargest(8).index\nrevenue_filtered = revenue_data[revenue_data['primary_genre'].isin(top_revenue_genres)]\n\nfig = px.box(\n    revenue_filtered,\n    x='primary_genre',\n    y='revenue',\n    color='primary_genre',\n    title=\"Revenue Distribution Across Top Genres\"\n)\n\nfig.update_layout(\n    plot_bgcolor='rgba(0,0,0,0)',\n    paper_bgcolor='rgba(0,0,0,0)',\n    xaxis_title=\"Genre\",\n    yaxis_title=\"Revenue (USD)\",\n    showlegend=False,\n    height=350,\n    xaxis_tickangle=45,\n    yaxis_type=\"log\"\n)\n\nfig\n```\n"},"formats":{"dashboard":{"identifier":{"display-name":"HTML","target-format":"dashboard","base-format":"dashboard"},"execute":{"fig-width":8,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":"all","plotly-connected":false,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"dashboard.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","page-layout":"custom","title":"üé¨ TMDB Movie Analytics Dashboard","author":"Vineet Sahoo","orientation":"columns","theme":["default","style.css"],"logo":"https://raw.githubusercontent.com/quarto-dev/quarto-web/main/favicon.png","nav-buttons":[{"icon":"github","href":"https://github.com/"}]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}