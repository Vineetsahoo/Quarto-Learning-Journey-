{
  "hash": "0e9d115d5b43ed014506da29ac1924c4",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nformat: \n  revealjs:\n    theme: dark\n    transition: slide\n    background-transition: fade\n    highlight-style: github\n    code-line-numbers: true\n    scrollable: true\n    navigation-mode: vertical\n    controls: true\n    progress: true\n    hash-one-based-index: true\n    slide-number: c/t\n    show-slide-number: all\n    preview-links: auto\n    chalkboard: true\ntitle: \"Advanced Python Programming Concepts\"\nsubtitle: \"Interactive Code Demonstrations\"\nauthor: \"Vineet Sahoo\"\ndate: \"July 8, 2025\"\nlogo: \"\"\nfooter: \"Python Programming Workshop\"\necho: true\ncode-fold: false\nexecute:\n  freeze: auto\n---\n\n# Welcome to Python Programming {background-color=\"#1e3a8a\"}\n\n## 🎯 Learning Objectives\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- **Functions & Control Flow**\n- **Data Structures**\n- **Object-Oriented Programming**\n- **Error Handling**\n:::\n\n::: {.column width=\"50%\"}\n- **File Operations**\n- **Data Analysis**\n- **Best Practices**\n- **Real-world Examples**\n:::\n\n::::\n\n::: {.notes}\nThis presentation covers essential Python programming concepts with interactive code examples and practical demonstrations.\n:::\n\n# Basic Functions & Control Flow {background-color=\"#059669\"}\n\n## Simple Function Example\n\n::: {.panel-tabset}\n\n### Code\n\n::: {#808b8fbe .cell execution_count=1}\n``` {.python .cell-code}\ndef example_function(a):\n    if a > 0:\n        return \"A is positive!\"\n    elif a < 0:\n        return \"A is negative!\"\n    else:\n        return \"A is zero!\"\n\n# Test the function\ntest_values = [5, -3, 0, 10]\nfor value in test_values:\n    result = example_function(value)\n    print(f\"example_function({value}) = {result}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nexample_function(5) = A is positive!\nexample_function(-3) = A is negative!\nexample_function(0) = A is zero!\nexample_function(10) = A is positive!\n```\n:::\n:::\n\n\n### Output\nThe function will evaluate different numbers and return appropriate messages based on their sign.\n\n:::\n\n## Function with Step-by-Step Walkthrough\n\n::: {.fragment}\nLet's trace through the execution step by step:\n:::\n\n``` {.python code-line-numbers=\"1|2-3|4-5|6-7|8-12|1-12\"}\ndef example_function(a):\n    if a > 0:\n        return \"A is positive!\"\n    elif a < 0:\n        return \"A is negative!\"\n    else:\n        return \"A is zero!\"\n\n# Interactive testing\nuser_input = 42\nprint(f\"Testing with value: {user_input}\")\nprint(f\"Result: {example_function(user_input)}\")\n```\n\n# Advanced Functions {background-color=\"#7c3aed\"}\n\n## Lambda Functions & Higher-Order Functions\n\n::: {#ecf574ec .cell execution_count=2}\n``` {.python .cell-code}\n# Lambda functions for quick operations\nsquare = lambda x: x ** 2\nis_even = lambda x: x % 2 == 0\n\n# Higher-order function example\ndef apply_operation(numbers, operation):\n    return [operation(num) for num in numbers]\n\n# Demonstration\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nsquared_numbers = apply_operation(numbers, square)\neven_numbers = [num for num in numbers if is_even(num)]\n\nprint(\"Original numbers:\", numbers)\nprint(\"Squared numbers:\", squared_numbers)\nprint(\"Even numbers:\", even_numbers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOriginal numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nSquared numbers: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nEven numbers: [2, 4, 6, 8, 10]\n```\n:::\n:::\n\n\n## Decorators in Action\n\n``` {.python code-line-numbers=\"1-6|8-11|13-19|21-24\"}\nimport time\nfrom functools import wraps\n\ndef timing_decorator(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f\"{func.__name__} executed in {end_time - start_time:.4f} seconds\")\n        return result\n    return wrapper\n\n@timing_decorator\ndef slow_calculation(n):\n    \"\"\"Simulate a slow calculation\"\"\"\n    total = 0\n    for i in range(n):\n        total += i ** 2\n    return total\n\n# Test the decorated function\nresult = slow_calculation(100000)\nprint(f\"Calculation result: {result}\")\n```\n\n# Data Structures & Analysis {background-color=\"#dc2626\"}\n\n## Working with Complex Data\n\n::: {#cd65ba0f .cell execution_count=3}\n``` {.python .cell-code}\nimport json\nfrom collections import defaultdict, Counter\n\n# Sample data structure\nstudent_data = [\n    {\"name\": \"Alice\", \"grades\": [85, 92, 78, 96], \"major\": \"Computer Science\"},\n    {\"name\": \"Bob\", \"grades\": [76, 81, 72, 89], \"major\": \"Mathematics\"},\n    {\"name\": \"Charlie\", \"grades\": [94, 87, 91, 93], \"major\": \"Computer Science\"},\n    {\"name\": \"Diana\", \"grades\": [88, 85, 90, 87], \"major\": \"Physics\"},\n    {\"name\": \"Eve\", \"grades\": [79, 83, 86, 82], \"major\": \"Mathematics\"}\n]\n\n# Data analysis\ndef analyze_student_data(data):\n    major_counter = Counter(student[\"major\"] for student in data)\n    grade_stats = {}\n    \n    for student in data:\n        avg_grade = sum(student[\"grades\"]) / len(student[\"grades\"])\n        grade_stats[student[\"name\"]] = {\n            \"average\": round(avg_grade, 2),\n            \"highest\": max(student[\"grades\"]),\n            \"lowest\": min(student[\"grades\"])\n        }\n    \n    return major_counter, grade_stats\n\nmajors, stats = analyze_student_data(student_data)\nprint(\"Major distribution:\", dict(majors))\nprint(\"\\nStudent statistics:\")\nfor name, stat in stats.items():\n    print(f\"{name}: Avg={stat['average']}, High={stat['highest']}, Low={stat['lowest']}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMajor distribution: {'Computer Science': 2, 'Mathematics': 2, 'Physics': 1}\n\nStudent statistics:\nAlice: Avg=87.75, High=96, Low=78\nBob: Avg=79.5, High=89, Low=72\nCharlie: Avg=91.25, High=94, Low=87\nDiana: Avg=87.5, High=90, Low=85\nEve: Avg=82.5, High=86, Low=79\n```\n:::\n:::\n\n\n## Data Visualization Preview\n\n::: {.panel-tabset}\n\n### Concept\n\n::: {#88754804 .cell execution_count=4}\n``` {.python .cell-code}\n# Conceptual plotting code (would require matplotlib/seaborn)\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate sample data\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\n# Note: This would create a plot in a real environment\nprint(\"Plotting sin(x) and cos(x) functions...\")\nprint(f\"X range: {x[0]:.2f} to {x[-1]:.2f}\")\nprint(f\"Y1 (sin) range: {min(y1):.2f} to {max(y1):.2f}\")\nprint(f\"Y2 (cos) range: {min(y2):.2f} to {max(y2):.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPlotting sin(x) and cos(x) functions...\nX range: 0.00 to 10.00\nY1 (sin) range: -1.00 to 1.00\nY2 (cos) range: -1.00 to 1.00\n```\n:::\n:::\n\n\n### Data Summary\nThis section would typically show beautiful visualizations of our student data, including:\n\n- Grade distributions by major\n- Individual student performance\n- Trends and patterns in the data\n\n:::\n\n# Object-Oriented Programming {background-color=\"#ea580c\"}\n\n## Complete Class Hierarchy\n\n``` {.python code-line-numbers=\"1-8|10-17|19-26|28-35|37-44|46-57|59-68\"}\n# Base class definition\nclass BankAccount:\n    def __init__(self, account_holder, initial_balance=0):\n        self.account_holder = account_holder\n        self.balance = initial_balance\n        self.transaction_history = []\n    \n    def __str__(self):\n        return f\"Account({self.account_holder}: ${self.balance:.2f})\"\n    \n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            self.transaction_history.append(f\"Deposited ${amount:.2f}\")\n            return True\n        return False\n    \n    def withdraw(self, amount):\n        if 0 < amount <= self.balance:\n            self.balance -= amount\n            self.transaction_history.append(f\"Withdrew ${amount:.2f}\")\n            return True\n        return False\n    \n    def get_balance(self):\n        return self.balance\n    \n    def get_transaction_history(self):\n        return self.transaction_history.copy()\n\n# Derived classes with inheritance\nclass SavingsAccount(BankAccount):\n    def __init__(self, account_holder, initial_balance=0, interest_rate=0.02):\n        super().__init__(account_holder, initial_balance)\n        self.interest_rate = interest_rate\n    \n    def apply_interest(self):\n        interest = self.balance * self.interest_rate\n        self.deposit(interest)\n        return interest\n\nclass CheckingAccount(BankAccount):\n    def __init__(self, account_holder, initial_balance=0, overdraft_limit=100):\n        super().__init__(account_holder, initial_balance)\n        self.overdraft_limit = overdraft_limit\n    \n    def withdraw(self, amount):\n        if 0 < amount <= (self.balance + self.overdraft_limit):\n            self.balance -= amount\n            self.transaction_history.append(f\"Withdrew ${amount:.2f}\")\n            return True\n        return False\n\n# Demonstration of all classes\nprint(\"=== Basic Account Demo ===\")\naccount = BankAccount(\"John Doe\", 1000)\nprint(f\"Initial: {account}\")\naccount.deposit(250)\naccount.withdraw(100)\nprint(f\"After transactions: {account}\")\n\nprint(\"\\n=== Inheritance & Polymorphism Demo ===\")\naccounts = [\n    SavingsAccount(\"Alice\", 5000),\n    CheckingAccount(\"Bob\", 1000),\n    BankAccount(\"Charlie\", 2000)\n]\n\nfor account in accounts:\n    print(f\"{type(account).__name__}: {account}\")\n\n# Test interest on savings account\nsavings = accounts[0]\ninterest_earned = savings.apply_interest()\nprint(f\"\\nAfter applying interest: {savings}\")\nprint(f\"Interest earned: ${interest_earned:.2f}\")\n```\n\n# Error Handling & Best Practices {background-color=\"#9333ea\"}\n\n## Robust Error Handling\n\n``` {.python code-line-numbers=\"1-5|7-15|17-25|27-35\"}\ndef safe_divide(a, b):\n    try:\n        result = a / b\n        return result, None\n    except ZeroDivisionError:\n        return None, \"Cannot divide by zero!\"\n    except TypeError:\n        return None, \"Invalid input types!\"\n\ndef process_file_safely(filename):\n    try:\n        with open(filename, 'r') as file:\n            content = file.read()\n            return content\n    except FileNotFoundError:\n        print(f\"File '{filename}' not found.\")\n        return None\n    except PermissionError:\n        print(f\"Permission denied to read '{filename}'.\")\n        return None\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return None\n\n# Custom exception example\nclass InsufficientFundsError(Exception):\n    def __init__(self, balance, amount):\n        self.balance = balance\n        self.amount = amount\n        super().__init__(f\"Insufficient funds: ${balance:.2f} < ${amount:.2f}\")\n\n# Testing error handling\ntest_cases = [(10, 2), (10, 0), (\"10\", 2)]\nfor a, b in test_cases:\n    result, error = safe_divide(a, b)\n    if error:\n        print(f\"Error: {error}\")\n    else:\n        print(f\"{a} / {b} = {result}\")\n```\n\n# Interactive Demo & Q&A {background-color=\"#0891b2\"}\n\n## 🚀 Key Takeaways\n\n::: {.incremental}\n- **Functions** are the building blocks of modular code\n- **Control flow** determines program execution path\n- **Data structures** organize and manage information\n- **OOP** provides powerful code organization\n- **Error handling** makes code robust and reliable\n- **Best practices** improve code quality and maintainability\n:::\n\n## 💡 Next Steps\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n### Practice Projects\n- Build a personal finance tracker\n- Create a simple game\n- Develop a data analysis tool\n- Design a web scraper\n:::\n\n::: {.column width=\"50%\"}\n### Advanced Topics\n- Asynchronous programming\n- Testing and debugging\n- Package development\n- Performance optimization\n:::\n\n::::\n\n## 🤔 Questions & Discussion\n\n::: {.r-fit-text}\n**Thank you for your attention!**\n:::\n\n::: {.fragment}\nFeel free to ask questions about:\n- Any code examples we've covered\n- Python best practices\n- Implementation details\n- Real-world applications\n:::\n\n::: {.notes}\nThis is the end of the presentation. Encourage questions and provide additional examples if needed.\n:::\n\n# Resources & References {background-color=\"#374151\"}\n\n## 📚 Additional Learning Materials\n\n- **Official Python Documentation**: [python.org](https://docs.python.org)\n- **Python Enhancement Proposals (PEPs)**: Style guides and best practices\n- **Real Python**: Comprehensive tutorials and articles\n- **Automate the Boring Stuff**: Practical Python programming\n- **Python Crash Course**: Beginner-friendly book\n\n## 🛠️ Development Tools\n\n- **IDEs**: PyCharm, VS Code, Jupyter Notebooks\n- **Package Management**: pip, conda, poetry\n- **Version Control**: Git and GitHub\n- **Testing**: pytest, unittest\n- **Code Quality**: pylint, black, mypy\n\n",
    "supporting": [
      "slideshow_files"
    ],
    "filters": [],
    "includes": {}
  }
}